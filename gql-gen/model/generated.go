// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AnnotationAuthorReferenceUnion interface {
	IsAnnotationAuthorReferenceUnion()
}

type ConditionNoteUnion interface {
	IsConditionNoteUnion()
}

type ConditionParticipantActorUnion interface {
	IsConditionParticipantActorUnion()
}

type ConditionParticipantUnion interface {
	IsConditionParticipantUnion()
}

type ConditionStageAssessmentUnion interface {
	IsConditionStageAssessmentUnion()
}

type ConditionStageUnion interface {
	IsConditionStageUnion()
}

type ConditionSubjectUnion interface {
	IsConditionSubjectUnion()
}

type DiagnosticReportBasedOnUnion interface {
	IsDiagnosticReportBasedOnUnion()
}

type DiagnosticReportNoteUnion interface {
	IsDiagnosticReportNoteUnion()
}

type DiagnosticReportPerformerUnion interface {
	IsDiagnosticReportPerformerUnion()
}

type DiagnosticReportResultsInterpreterUnion interface {
	IsDiagnosticReportResultsInterpreterUnion()
}

type DiagnosticReportStudyUnion interface {
	IsDiagnosticReportStudyUnion()
}

type DiagnosticReportSubjectUnion interface {
	IsDiagnosticReportSubjectUnion()
}

type DiagnosticReportSupportingInfoReferenceUnion interface {
	IsDiagnosticReportSupportingInfoReferenceUnion()
}

type DiagnosticReportSupportingInfoUnion interface {
	IsDiagnosticReportSupportingInfoUnion()
}

type DocumentReferenceAttesterPartyUnion interface {
	IsDocumentReferenceAttesterPartyUnion()
}

type DocumentReferenceAttesterUnion interface {
	IsDocumentReferenceAttesterUnion()
}

type DocumentReferenceAuthorUnion interface {
	IsDocumentReferenceAuthorUnion()
}

type DocumentReferenceBasedOnUnion interface {
	IsDocumentReferenceBasedOnUnion()
}

type ExtensionValueAnnotationUnion interface {
	IsExtensionValueAnnotationUnion()
}

type ExtensionValueSignatureUnion interface {
	IsExtensionValueSignatureUnion()
}

type ExtensionValueUsageContextUnion interface {
	IsExtensionValueUsageContextUnion()
}

type FamilyMemberHistoryConditionNoteUnion interface {
	IsFamilyMemberHistoryConditionNoteUnion()
}

type FamilyMemberHistoryNoteUnion interface {
	IsFamilyMemberHistoryNoteUnion()
}

type FamilyMemberHistoryParticipantActorUnion interface {
	IsFamilyMemberHistoryParticipantActorUnion()
}

type FamilyMemberHistoryParticipantUnion interface {
	IsFamilyMemberHistoryParticipantUnion()
}

type FamilyMemberHistoryProcedureNoteUnion interface {
	IsFamilyMemberHistoryProcedureNoteUnion()
}

type GroupManagingEntityUnion interface {
	IsGroupManagingEntityUnion()
}

type GroupMemberEntityUnion interface {
	IsGroupMemberEntityUnion()
}

type GroupMemberUnion interface {
	IsGroupMemberUnion()
}

type ImagingStudyBasedOnUnion interface {
	IsImagingStudyBasedOnUnion()
}

type ImagingStudyNoteUnion interface {
	IsImagingStudyNoteUnion()
}

type ImagingStudyReferrerUnion interface {
	IsImagingStudyReferrerUnion()
}

type ImagingStudySeriesPerformerActorUnion interface {
	IsImagingStudySeriesPerformerActorUnion()
}

type ImagingStudySeriesPerformerUnion interface {
	IsImagingStudySeriesPerformerUnion()
}

type ImagingStudySubjectUnion interface {
	IsImagingStudySubjectUnion()
}

type MedicationAdministrationNoteUnion interface {
	IsMedicationAdministrationNoteUnion()
}

type MedicationAdministrationPartOfUnion interface {
	IsMedicationAdministrationPartOfUnion()
}

type MedicationAdministrationSubjectUnion interface {
	IsMedicationAdministrationSubjectUnion()
}

type MedicationRequestBasedOnUnion interface {
	IsMedicationRequestBasedOnUnion()
}

type MedicationRequestDispenseRequestDispenserInstructionUnion interface {
	IsMedicationRequestDispenseRequestDispenserInstructionUnion()
}

type MedicationRequestInformationSourceUnion interface {
	IsMedicationRequestInformationSourceUnion()
}

type MedicationRequestNoteUnion interface {
	IsMedicationRequestNoteUnion()
}

type MedicationRequestPerformerUnion interface {
	IsMedicationRequestPerformerUnion()
}

type MedicationRequestRecorderUnion interface {
	IsMedicationRequestRecorderUnion()
}

type MedicationRequestRequesterUnion interface {
	IsMedicationRequestRequesterUnion()
}

type MedicationRequestSubjectUnion interface {
	IsMedicationRequestSubjectUnion()
}

type MedicationStatementInformationSourceUnion interface {
	IsMedicationStatementInformationSourceUnion()
}

type MedicationStatementNoteUnion interface {
	IsMedicationStatementNoteUnion()
}

type MedicationStatementPartOfUnion interface {
	IsMedicationStatementPartOfUnion()
}

type MedicationStatementRelatedClinicalInformationUnion interface {
	IsMedicationStatementRelatedClinicalInformationUnion()
}

type MedicationStatementSubjectUnion interface {
	IsMedicationStatementSubjectUnion()
}

type ObservationBasedOnUnion interface {
	IsObservationBasedOnUnion()
}

type ObservationDerivedFromUnion interface {
	IsObservationDerivedFromUnion()
}

type ObservationHasMemberUnion interface {
	IsObservationHasMemberUnion()
}

type ObservationNoteUnion interface {
	IsObservationNoteUnion()
}

type ObservationPartOfUnion interface {
	IsObservationPartOfUnion()
}

type ObservationPerformerUnion interface {
	IsObservationPerformerUnion()
}

type ObservationSpecimenUnion interface {
	IsObservationSpecimenUnion()
}

type ObservationSubjectUnion interface {
	IsObservationSubjectUnion()
}

type PatientGeneralPractitionerUnion interface {
	IsPatientGeneralPractitionerUnion()
}

type PatientLinkOtherUnion interface {
	IsPatientLinkOtherUnion()
}

type PatientLinkUnion interface {
	IsPatientLinkUnion()
}

type ProcedureFocusUnion interface {
	IsProcedureFocusUnion()
}

type ProcedureNoteUnion interface {
	IsProcedureNoteUnion()
}

type ProcedurePartOfUnion interface {
	IsProcedurePartOfUnion()
}

type ProcedurePerformerActorUnion interface {
	IsProcedurePerformerActorUnion()
}

type ProcedurePerformerUnion interface {
	IsProcedurePerformerUnion()
}

type ProcedureRecorderUnion interface {
	IsProcedureRecorderUnion()
}

type ProcedureReportUnion interface {
	IsProcedureReportUnion()
}

type ProcedureReportedReferenceUnion interface {
	IsProcedureReportedReferenceUnion()
}

type ProcedureSubjectUnion interface {
	IsProcedureSubjectUnion()
}

type ResearchStudyAssociatedPartyPartyUnion interface {
	IsResearchStudyAssociatedPartyPartyUnion()
}

type ResearchStudyAssociatedPartyUnion interface {
	IsResearchStudyAssociatedPartyUnion()
}

type ResearchStudyNoteUnion interface {
	IsResearchStudyNoteUnion()
}

type ResearchStudyRecruitmentEligibilityUnion interface {
	IsResearchStudyRecruitmentEligibilityUnion()
}

type ResearchStudyRecruitmentUnion interface {
	IsResearchStudyRecruitmentUnion()
}

type ResearchStudyResultUnion interface {
	IsResearchStudyResultUnion()
}

type ResearchStudySiteUnion interface {
	IsResearchStudySiteUnion()
}

type ResearchSubjectSubjectUnion interface {
	IsResearchSubjectSubjectUnion()
}

type ResourceUnion interface {
	IsResourceUnion()
}

type SignatureOnBehalfOfUnion interface {
	IsSignatureOnBehalfOfUnion()
}

type SignatureWhoUnion interface {
	IsSignatureWhoUnion()
}

type SpecimenCollectionCollectorUnion interface {
	IsSpecimenCollectionCollectorUnion()
}

type SpecimenCollectionUnion interface {
	IsSpecimenCollectionUnion()
}

type SpecimenNoteUnion interface {
	IsSpecimenNoteUnion()
}

type SpecimenSubjectUnion interface {
	IsSpecimenSubjectUnion()
}

type SubstanceDefinitionCodeNoteUnion interface {
	IsSubstanceDefinitionCodeNoteUnion()
}

type SubstanceDefinitionNoteUnion interface {
	IsSubstanceDefinitionNoteUnion()
}

type TaskInputValueAnnotationUnion interface {
	IsTaskInputValueAnnotationUnion()
}

type TaskInputValueSignatureUnion interface {
	IsTaskInputValueSignatureUnion()
}

type TaskInputValueUsageContextUnion interface {
	IsTaskInputValueUsageContextUnion()
}

type TaskNoteUnion interface {
	IsTaskNoteUnion()
}

type TaskOutputValueAnnotationUnion interface {
	IsTaskOutputValueAnnotationUnion()
}

type TaskOutputValueSignatureUnion interface {
	IsTaskOutputValueSignatureUnion()
}

type TaskOutputValueUsageContextUnion interface {
	IsTaskOutputValueUsageContextUnion()
}

type TaskOwnerUnion interface {
	IsTaskOwnerUnion()
}

type TaskPerformerActorUnion interface {
	IsTaskPerformerActorUnion()
}

type TaskPerformerUnion interface {
	IsTaskPerformerUnion()
}

type TaskRequesterUnion interface {
	IsTaskRequesterUnion()
}

type TaskRestrictionRecipientUnion interface {
	IsTaskRestrictionRecipientUnion()
}

type TaskRestrictionUnion interface {
	IsTaskRestrictionUnion()
}

type UsageContextValueReferenceUnion interface {
	IsUsageContextValueReferenceUnion()
}

type Address struct {
	Text         *string      `json:"text,omitempty"`
	Use          *string      `json:"use,omitempty"`
	ID           *string      `json:"id,omitempty"`
	Line         *string      `json:"line,omitempty"`
	Country      *string      `json:"country,omitempty"`
	PostalCode   *string      `json:"postalCode,omitempty"`
	State        *string      `json:"state,omitempty"`
	City         *string      `json:"city,omitempty"`
	District     *string      `json:"district,omitempty"`
	Period       *Period      `json:"period,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	Type         *string      `json:"type,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
}

type Age struct {
	Code         *string      `json:"code,omitempty"`
	Comparator   *string      `json:"comparator,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	System       *string      `json:"system,omitempty"`
	Unit         *string      `json:"unit,omitempty"`
	Value        *string      `json:"value,omitempty"`
}

type Annotation struct {
	AuthorString    *string                          `json:"authorString,omitempty"`
	Extension       []*Extension                     `json:"extension,omitempty"`
	ID              *string                          `json:"id,omitempty"`
	ResourceType    *string                          `json:"resourceType,omitempty"`
	Text            *string                          `json:"text,omitempty"`
	Time            *string                          `json:"time,omitempty"`
	AuthorReference []AnnotationAuthorReferenceUnion `json:"authorReference,omitempty"`
}

type Attachment struct {
	Width        *string      `json:"width,omitempty"`
	Pages        *string      `json:"pages,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	Data         *string      `json:"data,omitempty"`
	Size         *string      `json:"size,omitempty"`
	Duration     *string      `json:"duration,omitempty"`
	Title        *string      `json:"title,omitempty"`
	Creation     *string      `json:"creation,omitempty"`
	Height       *string      `json:"height,omitempty"`
	Frames       *string      `json:"frames,omitempty"`
	Hash         *string      `json:"hash,omitempty"`
	URL          *string      `json:"url,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	ID           *string      `json:"id,omitempty"`
	ContentType  *string      `json:"contentType,omitempty"`
	Language     *string      `json:"language,omitempty"`
}

type Availability struct {
	AvailableTime    []*AvailabilityAvailableTime    `json:"availableTime,omitempty"`
	Extension        []*Extension                    `json:"extension,omitempty"`
	ID               *string                         `json:"id,omitempty"`
	NotAvailableTime []*AvailabilityNotAvailableTime `json:"notAvailableTime,omitempty"`
	ResourceType     *string                         `json:"resourceType,omitempty"`
}

type AvailabilityAvailableTime struct {
	AvailableStartTime *string      `json:"availableStartTime,omitempty"`
	DaysOfWeek         *string      `json:"daysOfWeek,omitempty"`
	Extension          []*Extension `json:"extension,omitempty"`
	ID                 *string      `json:"id,omitempty"`
	ResourceType       *string      `json:"resourceType,omitempty"`
	AllDay             *string      `json:"allDay,omitempty"`
	AvailableEndTime   *string      `json:"availableEndTime,omitempty"`
}

type AvailabilityNotAvailableTime struct {
	ResourceType *string      `json:"resourceType,omitempty"`
	Description  *string      `json:"description,omitempty"`
	During       *Period      `json:"during,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
}

type BodyStructureIncludedStructure struct {
	Extension               []*Extension                                             `json:"extension,omitempty"`
	ID                      *string                                                  `json:"id,omitempty"`
	Laterality              *CodeableConcept                                         `json:"laterality,omitempty"`
	ModifierExtension       []*Extension                                             `json:"modifierExtension,omitempty"`
	Qualifier               []*CodeableConcept                                       `json:"qualifier,omitempty"`
	ResourceType            *string                                                  `json:"resourceType,omitempty"`
	Structure               *CodeableConcept                                         `json:"structure,omitempty"`
	BodyLandmarkOrientation []*BodyStructureIncludedStructureBodyLandmarkOrientation `json:"bodyLandmarkOrientation,omitempty"`
}

type BodyStructureIncludedStructureBodyLandmarkOrientation struct {
	ID                   *string                                                                      `json:"id,omitempty"`
	LandmarkDescription  []*CodeableConcept                                                           `json:"landmarkDescription,omitempty"`
	ModifierExtension    []*Extension                                                                 `json:"modifierExtension,omitempty"`
	ResourceType         *string                                                                      `json:"resourceType,omitempty"`
	SurfaceOrientation   []*CodeableConcept                                                           `json:"surfaceOrientation,omitempty"`
	ClockFacePosition    []*CodeableConcept                                                           `json:"clockFacePosition,omitempty"`
	DistanceFromLandmark []*BodyStructureIncludedStructureBodyLandmarkOrientationDistanceFromLandmark `json:"distanceFromLandmark,omitempty"`
	Extension            []*Extension                                                                 `json:"extension,omitempty"`
}

type BodyStructureIncludedStructureBodyLandmarkOrientationDistanceFromLandmark struct {
	Device            []*CodeableReference `json:"device,omitempty"`
	Extension         []*Extension         `json:"extension,omitempty"`
	ID                *string              `json:"id,omitempty"`
	ModifierExtension []*Extension         `json:"modifierExtension,omitempty"`
	ResourceType      *string              `json:"resourceType,omitempty"`
	Value             []*Quantity          `json:"value,omitempty"`
}

type BodyStructureType struct {
	Patient           []*PatientType                    `json:"patient,omitempty"`
	Contained         []ResourceUnion                   `json:"contained,omitempty"`
	ModifierExtension []*Extension                      `json:"modifierExtension,omitempty"`
	Active            *string                           `json:"active,omitempty"`
	Identifier        []*Identifier                     `json:"identifier,omitempty"`
	Image             []*Attachment                     `json:"image,omitempty"`
	Extension         []*Extension                      `json:"extension,omitempty"`
	ExcludedStructure []*BodyStructureIncludedStructure `json:"excludedStructure,omitempty"`
	ResourceType      *string                           `json:"resourceType,omitempty"`
	ID                *string                           `json:"id,omitempty"`
	Meta              *Meta                             `json:"meta,omitempty"`
	IncludedStructure []*BodyStructureIncludedStructure `json:"includedStructure,omitempty"`
	ImplicitRules     *string                           `json:"implicitRules,omitempty"`
	Morphology        *CodeableConcept                  `json:"morphology,omitempty"`
	Text              *Narrative                        `json:"text,omitempty"`
	Description       *string                           `json:"description,omitempty"`
	Language          *string                           `json:"language,omitempty"`
}

func (BodyStructureType) IsResourceUnion() {}

type CodeableConcept struct {
	Text         *string      `json:"text,omitempty"`
	Coding       []*Coding    `json:"coding,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
}

type CodeableReference struct {
	Extension    []*Extension     `json:"extension,omitempty"`
	ID           *string          `json:"id,omitempty"`
	ResourceType *string          `json:"resourceType,omitempty"`
	Concept      *CodeableConcept `json:"concept,omitempty"`
}

type Coding struct {
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	System       *string      `json:"system,omitempty"`
	UserSelected *string      `json:"userSelected,omitempty"`
	Version      *string      `json:"version,omitempty"`
	Code         *string      `json:"code,omitempty"`
	Display      *string      `json:"display,omitempty"`
}

type ConditionParticipant struct {
	ModifierExtension []*Extension                     `json:"modifierExtension,omitempty"`
	ResourceType      *string                          `json:"resourceType,omitempty"`
	Actor             []ConditionParticipantActorUnion `json:"actor,omitempty"`
	Extension         []*Extension                     `json:"extension,omitempty"`
	Function          *CodeableConcept                 `json:"function,omitempty"`
	ID                *string                          `json:"id,omitempty"`
}

type ConditionStage struct {
	ResourceType      *string                         `json:"resourceType,omitempty"`
	Summary           *CodeableConcept                `json:"summary,omitempty"`
	Type              *CodeableConcept                `json:"type,omitempty"`
	Assessment        []ConditionStageAssessmentUnion `json:"assessment,omitempty"`
	Extension         []*Extension                    `json:"extension,omitempty"`
	ID                *string                         `json:"id,omitempty"`
	ModifierExtension []*Extension                    `json:"modifierExtension,omitempty"`
}

type ConditionType struct {
	Contained          []ResourceUnion             `json:"contained,omitempty"`
	AbatementAge       *Age                        `json:"abatementAge,omitempty"`
	OnsetDateTime      *string                     `json:"onsetDateTime,omitempty"`
	VerificationStatus *CodeableConcept            `json:"verificationStatus,omitempty"`
	Code               *CodeableConcept            `json:"code,omitempty"`
	Language           *string                     `json:"language,omitempty"`
	Text               *Narrative                  `json:"text,omitempty"`
	AbatementString    *string                     `json:"abatementString,omitempty"`
	ClinicalStatus     *CodeableConcept            `json:"clinicalStatus,omitempty"`
	ModifierExtension  []*Extension                `json:"modifierExtension,omitempty"`
	AbatementRange     *Range                      `json:"abatementRange,omitempty"`
	ResourceType       *string                     `json:"resourceType,omitempty"`
	RecordedDate       *string                     `json:"recordedDate,omitempty"`
	Severity           *CodeableConcept            `json:"severity,omitempty"`
	ImplicitRules      *string                     `json:"implicitRules,omitempty"`
	OnsetAge           *Age                        `json:"onsetAge,omitempty"`
	Evidence           []*CodeableReference        `json:"evidence,omitempty"`
	Meta               *Meta                       `json:"meta,omitempty"`
	Stage              []ConditionStageUnion       `json:"stage,omitempty"`
	Category           []*CodeableConcept          `json:"category,omitempty"`
	OnsetRange         *Range                      `json:"onsetRange,omitempty"`
	Subject            []ConditionSubjectUnion     `json:"subject,omitempty"`
	AbatementPeriod    *Period                     `json:"abatementPeriod,omitempty"`
	ID                 *string                     `json:"id,omitempty"`
	BodySite           []*CodeableConcept          `json:"bodySite,omitempty"`
	OnsetString        *string                     `json:"onsetString,omitempty"`
	AbatementDateTime  *string                     `json:"abatementDateTime,omitempty"`
	Extension          []*Extension                `json:"extension,omitempty"`
	Participant        []ConditionParticipantUnion `json:"participant,omitempty"`
	Note               []ConditionNoteUnion        `json:"note,omitempty"`
	Identifier         []*Identifier               `json:"identifier,omitempty"`
	OnsetPeriod        *Period                     `json:"onsetPeriod,omitempty"`
}

func (ConditionType) IsMedicationStatementRelatedClinicalInformationUnion() {}

func (ConditionType) IsResourceUnion() {}

type ContactDetail struct {
	Telecom      []*ContactPoint `json:"telecom,omitempty"`
	Extension    []*Extension    `json:"extension,omitempty"`
	ID           *string         `json:"id,omitempty"`
	Name         *string         `json:"name,omitempty"`
	ResourceType *string         `json:"resourceType,omitempty"`
}

type ContactPoint struct {
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	Period       *Period      `json:"period,omitempty"`
	Rank         *string      `json:"rank,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	System       *string      `json:"system,omitempty"`
	Use          *string      `json:"use,omitempty"`
	Value        *string      `json:"value,omitempty"`
}

type Count struct {
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	System       *string      `json:"system,omitempty"`
	Unit         *string      `json:"unit,omitempty"`
	Value        *string      `json:"value,omitempty"`
	Code         *string      `json:"code,omitempty"`
	Comparator   *string      `json:"comparator,omitempty"`
}

type DataRequirement struct {
	Type                   *string                       `json:"type,omitempty"`
	ValueFilter            []*DataRequirementValueFilter `json:"valueFilter,omitempty"`
	DateFilter             []*DataRequirementDateFilter  `json:"dateFilter,omitempty"`
	Limit                  *string                       `json:"limit,omitempty"`
	SubjectCodeableConcept *CodeableConcept              `json:"subjectCodeableConcept,omitempty"`
	Extension              []*Extension                  `json:"extension,omitempty"`
	MustSupport            *string                       `json:"mustSupport,omitempty"`
	Sort                   []*DataRequirementSort        `json:"sort,omitempty"`
	ID                     *string                       `json:"id,omitempty"`
	Profile                *string                       `json:"profile,omitempty"`
	SubjectReference       []*GroupType                  `json:"subjectReference,omitempty"`
	ResourceType           *string                       `json:"resourceType,omitempty"`
	CodeFilter             []*DataRequirementCodeFilter  `json:"codeFilter,omitempty"`
}

type DataRequirementCodeFilter struct {
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	Path         *string      `json:"path,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	SearchParam  *string      `json:"searchParam,omitempty"`
	ValueSet     *string      `json:"valueSet,omitempty"`
	Code         []*Coding    `json:"code,omitempty"`
}

type DataRequirementDateFilter struct {
	ID            *string      `json:"id,omitempty"`
	Path          *string      `json:"path,omitempty"`
	ResourceType  *string      `json:"resourceType,omitempty"`
	SearchParam   *string      `json:"searchParam,omitempty"`
	ValueDateTime *string      `json:"valueDateTime,omitempty"`
	ValueDuration *Duration    `json:"valueDuration,omitempty"`
	ValuePeriod   *Period      `json:"valuePeriod,omitempty"`
	Extension     []*Extension `json:"extension,omitempty"`
}

type DataRequirementSort struct {
	Direction    *string      `json:"direction,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	Path         *string      `json:"path,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
}

type DataRequirementValueFilter struct {
	Extension     []*Extension `json:"extension,omitempty"`
	ID            *string      `json:"id,omitempty"`
	Path          *string      `json:"path,omitempty"`
	Comparator    *string      `json:"comparator,omitempty"`
	ResourceType  *string      `json:"resourceType,omitempty"`
	SearchParam   *string      `json:"searchParam,omitempty"`
	ValueDateTime *string      `json:"valueDateTime,omitempty"`
	ValueDuration *Duration    `json:"valueDuration,omitempty"`
	ValuePeriod   *Period      `json:"valuePeriod,omitempty"`
}

type DiagnosticReportMedia struct {
	ModifierExtension []*Extension             `json:"modifierExtension,omitempty"`
	ResourceType      *string                  `json:"resourceType,omitempty"`
	Comment           *string                  `json:"comment,omitempty"`
	Extension         []*Extension             `json:"extension,omitempty"`
	ID                *string                  `json:"id,omitempty"`
	Link              []*DocumentReferenceType `json:"link,omitempty"`
}

type DiagnosticReportSupportingInfo struct {
	ID                *string                                        `json:"id,omitempty"`
	ModifierExtension []*Extension                                   `json:"modifierExtension,omitempty"`
	Reference         []DiagnosticReportSupportingInfoReferenceUnion `json:"reference,omitempty"`
	ResourceType      *string                                        `json:"resourceType,omitempty"`
	Type              *CodeableConcept                               `json:"type,omitempty"`
	Extension         []*Extension                                   `json:"extension,omitempty"`
}

type DiagnosticReportType struct {
	Result             []*ObservationType                        `json:"result,omitempty"`
	ImplicitRules      *string                                   `json:"implicitRules,omitempty"`
	Language           *string                                   `json:"language,omitempty"`
	Performer          []DiagnosticReportPerformerUnion          `json:"performer,omitempty"`
	PresentedForm      []*Attachment                             `json:"presentedForm,omitempty"`
	Text               *Narrative                                `json:"text,omitempty"`
	Subject            []DiagnosticReportSubjectUnion            `json:"subject,omitempty"`
	Specimen           []*SpecimenType                           `json:"specimen,omitempty"`
	Identifier         []*Identifier                             `json:"identifier,omitempty"`
	Code               *CodeableConcept                          `json:"code,omitempty"`
	EffectiveDateTime  *string                                   `json:"effectiveDateTime,omitempty"`
	Media              []*DiagnosticReportMedia                  `json:"media,omitempty"`
	EffectivePeriod    *Period                                   `json:"effectivePeriod,omitempty"`
	Study              []DiagnosticReportStudyUnion              `json:"study,omitempty"`
	ResourceType       *string                                   `json:"resourceType,omitempty"`
	Meta               *Meta                                     `json:"meta,omitempty"`
	Contained          []ResourceUnion                           `json:"contained,omitempty"`
	ID                 *string                                   `json:"id,omitempty"`
	Note               []DiagnosticReportNoteUnion               `json:"note,omitempty"`
	ModifierExtension  []*Extension                              `json:"modifierExtension,omitempty"`
	BasedOn            []DiagnosticReportBasedOnUnion            `json:"basedOn,omitempty"`
	ConclusionCode     []*CodeableConcept                        `json:"conclusionCode,omitempty"`
	SupportingInfo     []DiagnosticReportSupportingInfoUnion     `json:"supportingInfo,omitempty"`
	Conclusion         *string                                   `json:"conclusion,omitempty"`
	Status             *string                                   `json:"status,omitempty"`
	Extension          []*Extension                              `json:"extension,omitempty"`
	Category           []*CodeableConcept                        `json:"category,omitempty"`
	Issued             *string                                   `json:"issued,omitempty"`
	ResultsInterpreter []DiagnosticReportResultsInterpreterUnion `json:"resultsInterpreter,omitempty"`
}

func (DiagnosticReportType) IsConditionStageUnion() {}

func (DiagnosticReportType) IsProcedureReportUnion() {}

func (DiagnosticReportType) IsConditionStageAssessmentUnion() {}

func (DiagnosticReportType) IsResearchStudyResultUnion() {}

func (DiagnosticReportType) IsDiagnosticReportSupportingInfoUnion() {}

func (DiagnosticReportType) IsDiagnosticReportSupportingInfoReferenceUnion() {}

func (DiagnosticReportType) IsResourceUnion() {}

type Distance struct {
	ResourceType *string      `json:"resourceType,omitempty"`
	System       *string      `json:"system,omitempty"`
	Unit         *string      `json:"unit,omitempty"`
	Value        *string      `json:"value,omitempty"`
	Code         *string      `json:"code,omitempty"`
	Comparator   *string      `json:"comparator,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
}

type DocumentReferenceAttester struct {
	ID                *string                               `json:"id,omitempty"`
	Mode              *CodeableConcept                      `json:"mode,omitempty"`
	ModifierExtension []*Extension                          `json:"modifierExtension,omitempty"`
	Party             []DocumentReferenceAttesterPartyUnion `json:"party,omitempty"`
	ResourceType      *string                               `json:"resourceType,omitempty"`
	Time              *string                               `json:"time,omitempty"`
	Extension         []*Extension                          `json:"extension,omitempty"`
}

type DocumentReferenceContent struct {
	Attachment        *Attachment                        `json:"attachment,omitempty"`
	Extension         []*Extension                       `json:"extension,omitempty"`
	ID                *string                            `json:"id,omitempty"`
	ModifierExtension []*Extension                       `json:"modifierExtension,omitempty"`
	Profile           []*DocumentReferenceContentProfile `json:"profile,omitempty"`
	ResourceType      *string                            `json:"resourceType,omitempty"`
}

type DocumentReferenceContentProfile struct {
	ValueURI          *string      `json:"valueUri,omitempty"`
	Extension         []*Extension `json:"extension,omitempty"`
	ID                *string      `json:"id,omitempty"`
	ModifierExtension []*Extension `json:"modifierExtension,omitempty"`
	ResourceType      *string      `json:"resourceType,omitempty"`
	ValueCanonical    *string      `json:"valueCanonical,omitempty"`
	ValueCoding       *Coding      `json:"valueCoding,omitempty"`
}

type DocumentReferenceRelatesTo struct {
	ModifierExtension []*Extension             `json:"modifierExtension,omitempty"`
	ResourceType      *string                  `json:"resourceType,omitempty"`
	Target            []*DocumentReferenceType `json:"target,omitempty"`
	Code              *CodeableConcept         `json:"code,omitempty"`
	Extension         []*Extension             `json:"extension,omitempty"`
	ID                *string                  `json:"id,omitempty"`
}

type DocumentReferenceType struct {
	Version           *string                          `json:"version,omitempty"`
	Language          *string                          `json:"language,omitempty"`
	ImplicitRules     *string                          `json:"implicitRules,omitempty"`
	BodySite          []*CodeableReference             `json:"bodySite,omitempty"`
	PracticeSetting   *CodeableConcept                 `json:"practiceSetting,omitempty"`
	Author            []DocumentReferenceAuthorUnion   `json:"author,omitempty"`
	BasedOn           []DocumentReferenceBasedOnUnion  `json:"basedOn,omitempty"`
	ResourceType      *string                          `json:"resourceType,omitempty"`
	Status            *string                          `json:"status,omitempty"`
	Type              *CodeableConcept                 `json:"type,omitempty"`
	Modality          []*CodeableConcept               `json:"modality,omitempty"`
	Period            *Period                          `json:"period,omitempty"`
	Attester          []DocumentReferenceAttesterUnion `json:"attester,omitempty"`
	DocStatus         *string                          `json:"docStatus,omitempty"`
	Meta              *Meta                            `json:"meta,omitempty"`
	Custodian         []*OrganizationType              `json:"custodian,omitempty"`
	Event             []*CodeableReference             `json:"event,omitempty"`
	RelatesTo         []*DocumentReferenceRelatesTo    `json:"relatesTo,omitempty"`
	FacilityType      *CodeableConcept                 `json:"facilityType,omitempty"`
	ID                *string                          `json:"id,omitempty"`
	SecurityLabel     []*CodeableConcept               `json:"securityLabel,omitempty"`
	Identifier        []*Identifier                    `json:"identifier,omitempty"`
	ModifierExtension []*Extension                     `json:"modifierExtension,omitempty"`
	Description       *string                          `json:"description,omitempty"`
	Extension         []*Extension                     `json:"extension,omitempty"`
	Category          []*CodeableConcept               `json:"category,omitempty"`
	Text              *Narrative                       `json:"text,omitempty"`
	Contained         []ResourceUnion                  `json:"contained,omitempty"`
	Subject           []ResourceUnion                  `json:"subject,omitempty"`
	Content           []*DocumentReferenceContent      `json:"content,omitempty"`
	Date              *string                          `json:"date,omitempty"`
}

func (DocumentReferenceType) IsObservationDerivedFromUnion() {}

func (DocumentReferenceType) IsProcedureReportUnion() {}

func (DocumentReferenceType) IsResourceUnion() {}

type Dosage struct {
	AsNeededFor              []*CodeableConcept   `json:"asNeededFor,omitempty"`
	DoseAndRate              []*DosageDoseAndRate `json:"doseAndRate,omitempty"`
	Route                    *CodeableConcept     `json:"route,omitempty"`
	Method                   *CodeableConcept     `json:"method,omitempty"`
	ModifierExtension        []*Extension         `json:"modifierExtension,omitempty"`
	PatientInstruction       *string              `json:"patientInstruction,omitempty"`
	Text                     *string              `json:"text,omitempty"`
	Extension                []*Extension         `json:"extension,omitempty"`
	Site                     *CodeableConcept     `json:"site,omitempty"`
	MaxDosePerAdministration *Quantity            `json:"maxDosePerAdministration,omitempty"`
	MaxDosePerLifetime       *Quantity            `json:"maxDosePerLifetime,omitempty"`
	ResourceType             *string              `json:"resourceType,omitempty"`
	AdditionalInstruction    []*CodeableConcept   `json:"additionalInstruction,omitempty"`
	AsNeeded                 *string              `json:"asNeeded,omitempty"`
	Timing                   *Timing              `json:"timing,omitempty"`
	ID                       *string              `json:"id,omitempty"`
	Sequence                 *string              `json:"sequence,omitempty"`
	MaxDosePerPeriod         []*Ratio             `json:"maxDosePerPeriod,omitempty"`
}

type DosageDoseAndRate struct {
	ID           *string          `json:"id,omitempty"`
	DoseRange    *Range           `json:"doseRange,omitempty"`
	ResourceType *string          `json:"resourceType,omitempty"`
	RateRange    *Range           `json:"rateRange,omitempty"`
	Type         *CodeableConcept `json:"type,omitempty"`
	DoseQuantity *Quantity        `json:"doseQuantity,omitempty"`
	RateRatio    *Ratio           `json:"rateRatio,omitempty"`
	Extension    []*Extension     `json:"extension,omitempty"`
	RateQuantity *Quantity        `json:"rateQuantity,omitempty"`
}

type Duration struct {
	Code         *string      `json:"code,omitempty"`
	Comparator   *string      `json:"comparator,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	System       *string      `json:"system,omitempty"`
	Unit         *string      `json:"unit,omitempty"`
	Value        *string      `json:"value,omitempty"`
}

type Encounter struct {
	Length             *Duration               `json:"length,omitempty"`
	ActualPeriod       *Period                 `json:"actualPeriod,omitempty"`
	Priority           *CodeableConcept        `json:"priority,omitempty"`
	Class              []*CodeableConcept      `json:"class,omitempty"`
	PlannedEndDate     *string                 `json:"plannedEndDate,omitempty"`
	ServiceType        []*CodeableReference    `json:"serviceType,omitempty"`
	Admission          *EncounterAdmission     `json:"admission,omitempty"`
	Meta               *Meta                   `json:"meta,omitempty"`
	ID                 *string                 `json:"id,omitempty"`
	Identifier         []*Identifier           `json:"identifier,omitempty"`
	PlannedStartDate   *string                 `json:"plannedStartDate,omitempty"`
	Type               []*CodeableConcept      `json:"type,omitempty"`
	Diagnosis          []*EncounterDiagnosis   `json:"diagnosis,omitempty"`
	Text               *Narrative              `json:"text,omitempty"`
	Participant        []*EncounterParticipant `json:"participant,omitempty"`
	Status             *string                 `json:"status,omitempty"`
	VirtualService     []*VirtualServiceDetail `json:"virtualService,omitempty"`
	ModifierExtension  []*Extension            `json:"modifierExtension,omitempty"`
	SpecialCourtesy    []*CodeableConcept      `json:"specialCourtesy,omitempty"`
	ResourceType       *string                 `json:"resourceType,omitempty"`
	SpecialArrangement []*CodeableConcept      `json:"specialArrangement,omitempty"`
	Extension          []*Extension            `json:"extension,omitempty"`
	Contained          []ResourceUnion         `json:"contained,omitempty"`
	Location           []*EncounterLocation    `json:"location,omitempty"`
	ImplicitRules      *string                 `json:"implicitRules,omitempty"`
	DietPreference     []*CodeableConcept      `json:"dietPreference,omitempty"`
	Reason             []*EncounterReason      `json:"reason,omitempty"`
	SubjectStatus      *CodeableConcept        `json:"subjectStatus,omitempty"`
	Language           *string                 `json:"language,omitempty"`
}

type EncounterAdmission struct {
	Extension              []*Extension     `json:"extension,omitempty"`
	ID                     *string          `json:"id,omitempty"`
	ModifierExtension      []*Extension     `json:"modifierExtension,omitempty"`
	PreAdmissionIdentifier *Identifier      `json:"preAdmissionIdentifier,omitempty"`
	ReAdmission            *CodeableConcept `json:"reAdmission,omitempty"`
	ResourceType           *string          `json:"resourceType,omitempty"`
	AdmitSource            *CodeableConcept `json:"admitSource,omitempty"`
	DischargeDisposition   *CodeableConcept `json:"dischargeDisposition,omitempty"`
}

type EncounterDiagnosis struct {
	ResourceType      *string              `json:"resourceType,omitempty"`
	Use               []*CodeableConcept   `json:"use,omitempty"`
	Condition         []*CodeableReference `json:"condition,omitempty"`
	Extension         []*Extension         `json:"extension,omitempty"`
	ID                *string              `json:"id,omitempty"`
	ModifierExtension []*Extension         `json:"modifierExtension,omitempty"`
}

type EncounterLocation struct {
	Period            *Period          `json:"period,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	Status            *string          `json:"status,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	Form              *CodeableConcept `json:"form,omitempty"`
	ID                *string          `json:"id,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
}

type EncounterParticipant struct {
	ID                *string            `json:"id,omitempty"`
	ModifierExtension []*Extension       `json:"modifierExtension,omitempty"`
	Period            *Period            `json:"period,omitempty"`
	ResourceType      *string            `json:"resourceType,omitempty"`
	Type              []*CodeableConcept `json:"type,omitempty"`
	Extension         []*Extension       `json:"extension,omitempty"`
}

type EncounterReason struct {
	ResourceType      *string              `json:"resourceType,omitempty"`
	Use               []*CodeableConcept   `json:"use,omitempty"`
	Value             []*CodeableReference `json:"value,omitempty"`
	Extension         []*Extension         `json:"extension,omitempty"`
	ID                *string              `json:"id,omitempty"`
	ModifierExtension []*Extension         `json:"modifierExtension,omitempty"`
}

type Expression struct {
	Expression   *string      `json:"expression,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	Language     *string      `json:"language,omitempty"`
	Name         *string      `json:"name,omitempty"`
	Reference    *string      `json:"reference,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	Description  *string      `json:"description,omitempty"`
}

type ExtendedContactDetail struct {
	Name         []*HumanName        `json:"name,omitempty"`
	Organization []*OrganizationType `json:"organization,omitempty"`
	Purpose      *CodeableConcept    `json:"purpose,omitempty"`
	ResourceType *string             `json:"resourceType,omitempty"`
	Telecom      []*ContactPoint     `json:"telecom,omitempty"`
	Address      *Address            `json:"address,omitempty"`
	ID           *string             `json:"id,omitempty"`
	Extension    []*Extension        `json:"extension,omitempty"`
	Period       *Period             `json:"period,omitempty"`
}

type Extension struct {
	ValueURI                   *string                           `json:"valueUri,omitempty"`
	ValueInteger               *string                           `json:"valueInteger,omitempty"`
	ValueAttachment            *Attachment                       `json:"valueAttachment,omitempty"`
	ValueParameterDefinition   *ParameterDefinition              `json:"valueParameterDefinition,omitempty"`
	ValueInteger64             *string                           `json:"valueInteger64,omitempty"`
	ValueHumanName             *HumanName                        `json:"valueHumanName,omitempty"`
	ValueAge                   *Age                              `json:"valueAge,omitempty"`
	ValueCodeableConcept       *CodeableConcept                  `json:"valueCodeableConcept,omitempty"`
	ValueSampledData           *SampledData                      `json:"valueSampledData,omitempty"`
	ValueDateTime              *string                           `json:"valueDateTime,omitempty"`
	ValueExtendedContactDetail *ExtendedContactDetail            `json:"valueExtendedContactDetail,omitempty"`
	ValueMarkdown              *string                           `json:"valueMarkdown,omitempty"`
	ValueTriggerDefinition     *TriggerDefinition                `json:"valueTriggerDefinition,omitempty"`
	ValueString                *string                           `json:"valueString,omitempty"`
	ValueContactPoint          *ContactPoint                     `json:"valueContactPoint,omitempty"`
	ValueAnnotation            []ExtensionValueAnnotationUnion   `json:"valueAnnotation,omitempty"`
	ValueContactDetail         *ContactDetail                    `json:"valueContactDetail,omitempty"`
	ValueQuantity              *Quantity                         `json:"valueQuantity,omitempty"`
	ValueUUID                  *string                           `json:"valueUuid,omitempty"`
	ValueRange                 *Range                            `json:"valueRange,omitempty"`
	ValueCanonical             *string                           `json:"valueCanonical,omitempty"`
	ValueCodeableReference     *CodeableReference                `json:"valueCodeableReference,omitempty"`
	ID                         *string                           `json:"id,omitempty"`
	ValueRatio                 *Ratio                            `json:"valueRatio,omitempty"`
	ValueOid                   *string                           `json:"valueOid,omitempty"`
	ValueRatioRange            *RatioRange                       `json:"valueRatioRange,omitempty"`
	ValueInstant               *string                           `json:"valueInstant,omitempty"`
	ValueDuration              *Duration                         `json:"valueDuration,omitempty"`
	ValueRelatedArtifact       *RelatedArtifact                  `json:"valueRelatedArtifact,omitempty"`
	ValueSignature             []ExtensionValueSignatureUnion    `json:"valueSignature,omitempty"`
	ValueDate                  *string                           `json:"valueDate,omitempty"`
	ValueDosage                *Dosage                           `json:"valueDosage,omitempty"`
	ValueBase64Binary          *string                           `json:"valueBase64Binary,omitempty"`
	ValuePeriod                *Period                           `json:"valuePeriod,omitempty"`
	ValueMoney                 *Money                            `json:"valueMoney,omitempty"`
	ValueIdentifier            *Identifier                       `json:"valueIdentifier,omitempty"`
	URL                        *string                           `json:"url,omitempty"`
	ValueCode                  *string                           `json:"valueCode,omitempty"`
	ValuePositiveInt           *string                           `json:"valuePositiveInt,omitempty"`
	ValueID                    *string                           `json:"valueId,omitempty"`
	ValueUnsignedInt           *string                           `json:"valueUnsignedInt,omitempty"`
	ValueDataRequirement       *DataRequirement                  `json:"valueDataRequirement,omitempty"`
	ValueTime                  *string                           `json:"valueTime,omitempty"`
	ValueCoding                *Coding                           `json:"valueCoding,omitempty"`
	ValueTiming                *Timing                           `json:"valueTiming,omitempty"`
	ValueExpression            *Expression                       `json:"valueExpression,omitempty"`
	ValueDistance              *Distance                         `json:"valueDistance,omitempty"`
	ValueCount                 *Count                            `json:"valueCount,omitempty"`
	ResourceType               *string                           `json:"resourceType,omitempty"`
	ValueAvailability          *Availability                     `json:"valueAvailability,omitempty"`
	ValueURL                   *string                           `json:"valueUrl,omitempty"`
	ValueBoolean               *string                           `json:"valueBoolean,omitempty"`
	ValueDecimal               *string                           `json:"valueDecimal,omitempty"`
	ValueMeta                  *Meta                             `json:"valueMeta,omitempty"`
	ValueAddress               *Address                          `json:"valueAddress,omitempty"`
	ValueUsageContext          []ExtensionValueUsageContextUnion `json:"valueUsageContext,omitempty"`
	Extension                  []*Extension                      `json:"extension,omitempty"`
}

type FHIRPrimitiveExtension struct {
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
}

type FamilyMemberHistoryCondition struct {
	OnsetPeriod        *Period                                 `json:"onsetPeriod,omitempty"`
	Extension          []*Extension                            `json:"extension,omitempty"`
	Note               []FamilyMemberHistoryConditionNoteUnion `json:"note,omitempty"`
	OnsetAge           *Age                                    `json:"onsetAge,omitempty"`
	OnsetRange         *Range                                  `json:"onsetRange,omitempty"`
	ResourceType       *string                                 `json:"resourceType,omitempty"`
	ContributedToDeath *string                                 `json:"contributedToDeath,omitempty"`
	ID                 *string                                 `json:"id,omitempty"`
	Code               *CodeableConcept                        `json:"code,omitempty"`
	OnsetString        *string                                 `json:"onsetString,omitempty"`
	Outcome            *CodeableConcept                        `json:"outcome,omitempty"`
	ModifierExtension  []*Extension                            `json:"modifierExtension,omitempty"`
}

type FamilyMemberHistoryParticipant struct {
	Actor             []FamilyMemberHistoryParticipantActorUnion `json:"actor,omitempty"`
	Extension         []*Extension                               `json:"extension,omitempty"`
	Function          *CodeableConcept                           `json:"function,omitempty"`
	ID                *string                                    `json:"id,omitempty"`
	ModifierExtension []*Extension                               `json:"modifierExtension,omitempty"`
	ResourceType      *string                                    `json:"resourceType,omitempty"`
}

type FamilyMemberHistoryProcedure struct {
	ModifierExtension  []*Extension                            `json:"modifierExtension,omitempty"`
	Note               []FamilyMemberHistoryProcedureNoteUnion `json:"note,omitempty"`
	PerformedDateTime  *string                                 `json:"performedDateTime,omitempty"`
	PerformedRange     *Range                                  `json:"performedRange,omitempty"`
	ContributedToDeath *string                                 `json:"contributedToDeath,omitempty"`
	PerformedAge       *Age                                    `json:"performedAge,omitempty"`
	PerformedPeriod    *Period                                 `json:"performedPeriod,omitempty"`
	PerformedString    *string                                 `json:"performedString,omitempty"`
	ResourceType       *string                                 `json:"resourceType,omitempty"`
	ID                 *string                                 `json:"id,omitempty"`
	Extension          []*Extension                            `json:"extension,omitempty"`
	Code               *CodeableConcept                        `json:"code,omitempty"`
	Outcome            *CodeableConcept                        `json:"outcome,omitempty"`
}

type FamilyMemberHistoryType struct {
	Condition             []*FamilyMemberHistoryCondition       `json:"condition,omitempty"`
	AgeAge                *Age                                  `json:"ageAge,omitempty"`
	DeceasedRange         *Range                                `json:"deceasedRange,omitempty"`
	DeceasedAge           *Age                                  `json:"deceasedAge,omitempty"`
	Status                *string                               `json:"status,omitempty"`
	Language              *string                               `json:"language,omitempty"`
	Identifier            []*Identifier                         `json:"identifier,omitempty"`
	Sex                   *CodeableConcept                      `json:"sex,omitempty"`
	Note                  []FamilyMemberHistoryNoteUnion        `json:"note,omitempty"`
	Contained             []ResourceUnion                       `json:"contained,omitempty"`
	ID                    *string                               `json:"id,omitempty"`
	ResourceType          *string                               `json:"resourceType,omitempty"`
	DeceasedString        *string                               `json:"deceasedString,omitempty"`
	Relationship          *CodeableConcept                      `json:"relationship,omitempty"`
	BornDate              *string                               `json:"bornDate,omitempty"`
	DataAbsentReason      *CodeableConcept                      `json:"dataAbsentReason,omitempty"`
	EstimatedAge          *string                               `json:"estimatedAge,omitempty"`
	ModifierExtension     []*Extension                          `json:"modifierExtension,omitempty"`
	Date                  *string                               `json:"date,omitempty"`
	Patient               []*PatientType                        `json:"patient,omitempty"`
	Extension             []*Extension                          `json:"extension,omitempty"`
	Procedure             []*FamilyMemberHistoryProcedure       `json:"procedure,omitempty"`
	Meta                  *Meta                                 `json:"meta,omitempty"`
	AgeRange              *Range                                `json:"ageRange,omitempty"`
	Name                  *string                               `json:"name,omitempty"`
	DeceasedDate          *string                               `json:"deceasedDate,omitempty"`
	DeceasedBoolean       *string                               `json:"deceasedBoolean,omitempty"`
	InstantiatesCanonical *string                               `json:"instantiatesCanonical,omitempty"`
	AgeString             *string                               `json:"ageString,omitempty"`
	Text                  *Narrative                            `json:"text,omitempty"`
	ImplicitRules         *string                               `json:"implicitRules,omitempty"`
	Reason                []*CodeableReference                  `json:"reason,omitempty"`
	InstantiatesURI       *string                               `json:"instantiatesUri,omitempty"`
	BornString            *string                               `json:"bornString,omitempty"`
	Participant           []FamilyMemberHistoryParticipantUnion `json:"participant,omitempty"`
	BornPeriod            *Period                               `json:"bornPeriod,omitempty"`
}

func (FamilyMemberHistoryType) IsResourceUnion() {}

type GroupCharacteristic struct {
	Period               *Period          `json:"period,omitempty"`
	Code                 *CodeableConcept `json:"code,omitempty"`
	ValueBoolean         *string          `json:"valueBoolean,omitempty"`
	ValueQuantity        *Quantity        `json:"valueQuantity,omitempty"`
	ValueRange           *Range           `json:"valueRange,omitempty"`
	Extension            []*Extension     `json:"extension,omitempty"`
	ModifierExtension    []*Extension     `json:"modifierExtension,omitempty"`
	ResourceType         *string          `json:"resourceType,omitempty"`
	Exclude              *string          `json:"exclude,omitempty"`
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept,omitempty"`
	ID                   *string          `json:"id,omitempty"`
}

type GroupMember struct {
	Entity            []GroupMemberEntityUnion `json:"entity,omitempty"`
	Extension         []*Extension             `json:"extension,omitempty"`
	ID                *string                  `json:"id,omitempty"`
	Inactive          *string                  `json:"inactive,omitempty"`
	ModifierExtension []*Extension             `json:"modifierExtension,omitempty"`
	Period            *Period                  `json:"period,omitempty"`
	ResourceType      *string                  `json:"resourceType,omitempty"`
}

type GroupType struct {
	Member            []GroupMemberUnion         `json:"member,omitempty"`
	Extension         []*Extension               `json:"extension,omitempty"`
	Meta              *Meta                      `json:"meta,omitempty"`
	Contained         []ResourceUnion            `json:"contained,omitempty"`
	Membership        *string                    `json:"membership,omitempty"`
	ResourceType      *string                    `json:"resourceType,omitempty"`
	Characteristic    []*GroupCharacteristic     `json:"characteristic,omitempty"`
	Quantity          *string                    `json:"quantity,omitempty"`
	Type              *string                    `json:"type,omitempty"`
	Active            *string                    `json:"active,omitempty"`
	Description       *string                    `json:"description,omitempty"`
	Code              *CodeableConcept           `json:"code,omitempty"`
	ID                *string                    `json:"id,omitempty"`
	Language          *string                    `json:"language,omitempty"`
	ModifierExtension []*Extension               `json:"modifierExtension,omitempty"`
	Name              *string                    `json:"name,omitempty"`
	ImplicitRules     *string                    `json:"implicitRules,omitempty"`
	Text              *Narrative                 `json:"text,omitempty"`
	ManagingEntity    []GroupManagingEntityUnion `json:"managingEntity,omitempty"`
	Identifier        []*Identifier              `json:"identifier,omitempty"`
}

func (GroupType) IsGroupMemberUnion() {}

func (GroupType) IsMedicationAdministrationSubjectUnion() {}

func (GroupType) IsUsageContextValueReferenceUnion() {}

func (GroupType) IsResearchStudyRecruitmentEligibilityUnion() {}

func (GroupType) IsTaskRestrictionRecipientUnion() {}

func (GroupType) IsSpecimenSubjectUnion() {}

func (GroupType) IsMedicationRequestSubjectUnion() {}

func (GroupType) IsMedicationStatementSubjectUnion() {}

func (GroupType) IsGroupMemberEntityUnion() {}

func (GroupType) IsConditionSubjectUnion() {}

func (GroupType) IsObservationSpecimenUnion() {}

func (GroupType) IsObservationSubjectUnion() {}

func (GroupType) IsProcedureFocusUnion() {}

func (GroupType) IsProcedureSubjectUnion() {}

func (GroupType) IsResearchSubjectSubjectUnion() {}

func (GroupType) IsTaskInputValueUsageContextUnion() {}

func (GroupType) IsImagingStudySubjectUnion() {}

func (GroupType) IsResearchStudyRecruitmentUnion() {}

func (GroupType) IsExtensionValueUsageContextUnion() {}

func (GroupType) IsDiagnosticReportSubjectUnion() {}

func (GroupType) IsTaskOutputValueUsageContextUnion() {}

func (GroupType) IsTaskRestrictionUnion() {}

func (GroupType) IsResourceUnion() {}

type HumanName struct {
	Suffix       *string      `json:"suffix,omitempty"`
	Use          *string      `json:"use,omitempty"`
	Family       *string      `json:"family,omitempty"`
	Given        *string      `json:"given,omitempty"`
	ID           *string      `json:"id,omitempty"`
	Prefix       *string      `json:"prefix,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	Period       *Period      `json:"period,omitempty"`
	Text         *string      `json:"text,omitempty"`
}

type Identifier struct {
	Type         *CodeableConcept    `json:"type,omitempty"`
	Extension    []*Extension        `json:"extension,omitempty"`
	Period       *Period             `json:"period,omitempty"`
	System       *string             `json:"system,omitempty"`
	Value        *string             `json:"value,omitempty"`
	Assigner     []*OrganizationType `json:"assigner,omitempty"`
	ID           *string             `json:"id,omitempty"`
	ResourceType *string             `json:"resourceType,omitempty"`
	Use          *string             `json:"use,omitempty"`
}

type ImagingStudySeries struct {
	BodySite          *CodeableReference                 `json:"bodySite,omitempty"`
	ResourceType      *string                            `json:"resourceType,omitempty"`
	ID                *string                            `json:"id,omitempty"`
	Started           *string                            `json:"started,omitempty"`
	Extension         []*Extension                       `json:"extension,omitempty"`
	NumberOfInstances *string                            `json:"numberOfInstances,omitempty"`
	UID               *string                            `json:"uid,omitempty"`
	Laterality        *CodeableConcept                   `json:"laterality,omitempty"`
	Modality          *CodeableConcept                   `json:"modality,omitempty"`
	Performer         []ImagingStudySeriesPerformerUnion `json:"performer,omitempty"`
	ModifierExtension []*Extension                       `json:"modifierExtension,omitempty"`
	Description       *string                            `json:"description,omitempty"`
	Number            *string                            `json:"number,omitempty"`
	Instance          []*ImagingStudySeriesInstance      `json:"instance,omitempty"`
	Specimen          []*SpecimenType                    `json:"specimen,omitempty"`
}

type ImagingStudySeriesInstance struct {
	SopClass          *Coding      `json:"sopClass,omitempty"`
	Title             *string      `json:"title,omitempty"`
	UID               *string      `json:"uid,omitempty"`
	Extension         []*Extension `json:"extension,omitempty"`
	ID                *string      `json:"id,omitempty"`
	ModifierExtension []*Extension `json:"modifierExtension,omitempty"`
	Number            *string      `json:"number,omitempty"`
	ResourceType      *string      `json:"resourceType,omitempty"`
}

type ImagingStudySeriesPerformer struct {
	ModifierExtension []*Extension                            `json:"modifierExtension,omitempty"`
	ResourceType      *string                                 `json:"resourceType,omitempty"`
	Actor             []ImagingStudySeriesPerformerActorUnion `json:"actor,omitempty"`
	Extension         []*Extension                            `json:"extension,omitempty"`
	Function          *CodeableConcept                        `json:"function,omitempty"`
	ID                *string                                 `json:"id,omitempty"`
}

type ImagingStudyType struct {
	PartOf            []*ProcedureType            `json:"partOf,omitempty"`
	Text              *Narrative                  `json:"text,omitempty"`
	Meta              *Meta                       `json:"meta,omitempty"`
	Extension         []*Extension                `json:"extension,omitempty"`
	Language          *string                     `json:"language,omitempty"`
	BasedOn           []ImagingStudyBasedOnUnion  `json:"basedOn,omitempty"`
	NumberOfInstances *string                     `json:"numberOfInstances,omitempty"`
	Procedure         []*CodeableReference        `json:"procedure,omitempty"`
	Identifier        []*Identifier               `json:"identifier,omitempty"`
	ImplicitRules     *string                     `json:"implicitRules,omitempty"`
	Referrer          []ImagingStudyReferrerUnion `json:"referrer,omitempty"`
	Modality          []*CodeableConcept          `json:"modality,omitempty"`
	ResourceType      *string                     `json:"resourceType,omitempty"`
	Note              []ImagingStudyNoteUnion     `json:"note,omitempty"`
	Contained         []ResourceUnion             `json:"contained,omitempty"`
	ModifierExtension []*Extension                `json:"modifierExtension,omitempty"`
	Series            []*ImagingStudySeries       `json:"series,omitempty"`
	Reason            []*CodeableReference        `json:"reason,omitempty"`
	Started           *string                     `json:"started,omitempty"`
	Status            *string                     `json:"status,omitempty"`
	Subject           []ImagingStudySubjectUnion  `json:"subject,omitempty"`
	Description       *string                     `json:"description,omitempty"`
	ID                *string                     `json:"id,omitempty"`
	NumberOfSeries    *string                     `json:"numberOfSeries,omitempty"`
}

func (ImagingStudyType) IsObservationDerivedFromUnion() {}

func (ImagingStudyType) IsObservationPartOfUnion() {}

func (ImagingStudyType) IsDiagnosticReportStudyUnion() {}

func (ImagingStudyType) IsResourceUnion() {}

type Immunization struct {
	StatusReason        *CodeableConcept                  `json:"statusReason,omitempty"`
	AdministeredProduct *CodeableReference                `json:"administeredProduct,omitempty"`
	DoseQuantity        *Quantity                         `json:"doseQuantity,omitempty"`
	LotNumber           *string                           `json:"lotNumber,omitempty"`
	Status              *string                           `json:"status,omitempty"`
	Manufacturer        *CodeableReference                `json:"manufacturer,omitempty"`
	Extension           []*Extension                      `json:"extension,omitempty"`
	ExpirationDate      *string                           `json:"expirationDate,omitempty"`
	Identifier          []*Identifier                     `json:"identifier,omitempty"`
	Note                []*Annotation                     `json:"note,omitempty"`
	Reaction            []*ImmunizationReaction           `json:"reaction,omitempty"`
	ProtocolApplied     []*ImmunizationProtocolApplied    `json:"protocolApplied,omitempty"`
	Site                *CodeableConcept                  `json:"site,omitempty"`
	OccurrenceDateTime  *string                           `json:"occurrenceDateTime,omitempty"`
	Reason              []*CodeableReference              `json:"reason,omitempty"`
	FundingSource       *CodeableConcept                  `json:"fundingSource,omitempty"`
	Meta                *Meta                             `json:"meta,omitempty"`
	SubpotentReason     []*CodeableConcept                `json:"subpotentReason,omitempty"`
	ResourceType        *string                           `json:"resourceType,omitempty"`
	VaccineCode         *CodeableConcept                  `json:"vaccineCode,omitempty"`
	Text                *Narrative                        `json:"text,omitempty"`
	ImplicitRules       *string                           `json:"implicitRules,omitempty"`
	InformationSource   *CodeableReference                `json:"informationSource,omitempty"`
	OccurrenceString    *string                           `json:"occurrenceString,omitempty"`
	Performer           []*ImmunizationPerformer          `json:"performer,omitempty"`
	ProgramEligibility  []*ImmunizationProgramEligibility `json:"programEligibility,omitempty"`
	Route               *CodeableConcept                  `json:"route,omitempty"`
	Contained           []ResourceUnion                   `json:"contained,omitempty"`
	ID                  *string                           `json:"id,omitempty"`
	PrimarySource       *string                           `json:"primarySource,omitempty"`
	IsSubpotent         *string                           `json:"isSubpotent,omitempty"`
	Language            *string                           `json:"language,omitempty"`
	ModifierExtension   []*Extension                      `json:"modifierExtension,omitempty"`
}

type ImmunizationPerformer struct {
	Function          *CodeableConcept `json:"function,omitempty"`
	ID                *string          `json:"id,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
}

type ImmunizationProgramEligibility struct {
	ProgramStatus     *CodeableConcept `json:"programStatus,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	ID                *string          `json:"id,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	Program           *CodeableConcept `json:"program,omitempty"`
}

type ImmunizationProtocolApplied struct {
	SeriesDoses       *string            `json:"seriesDoses,omitempty"`
	TargetDisease     []*CodeableConcept `json:"targetDisease,omitempty"`
	DoseNumber        *string            `json:"doseNumber,omitempty"`
	Extension         []*Extension       `json:"extension,omitempty"`
	ID                *string            `json:"id,omitempty"`
	ModifierExtension []*Extension       `json:"modifierExtension,omitempty"`
	ResourceType      *string            `json:"resourceType,omitempty"`
	Series            *string            `json:"series,omitempty"`
}

type ImmunizationReaction struct {
	Manifestation     *CodeableReference `json:"manifestation,omitempty"`
	ModifierExtension []*Extension       `json:"modifierExtension,omitempty"`
	Reported          *string            `json:"reported,omitempty"`
	ResourceType      *string            `json:"resourceType,omitempty"`
	Date              *string            `json:"date,omitempty"`
	Extension         []*Extension       `json:"extension,omitempty"`
	ID                *string            `json:"id,omitempty"`
}

type Location struct {
	Meta              *Meta                    `json:"meta,omitempty"`
	Name              *string                  `json:"name,omitempty"`
	Contained         []ResourceUnion          `json:"contained,omitempty"`
	Form              *CodeableConcept         `json:"form,omitempty"`
	Language          *string                  `json:"language,omitempty"`
	Extension         []*Extension             `json:"extension,omitempty"`
	ResourceType      *string                  `json:"resourceType,omitempty"`
	ID                *string                  `json:"id,omitempty"`
	Characteristic    []*CodeableConcept       `json:"characteristic,omitempty"`
	ModifierExtension []*Extension             `json:"modifierExtension,omitempty"`
	Address           *Address                 `json:"address,omitempty"`
	ImplicitRules     *string                  `json:"implicitRules,omitempty"`
	Mode              *string                  `json:"mode,omitempty"`
	OperationalStatus *Coding                  `json:"operationalStatus,omitempty"`
	Position          *LocationPosition        `json:"position,omitempty"`
	VirtualService    []*VirtualServiceDetail  `json:"virtualService,omitempty"`
	Text              *Narrative               `json:"text,omitempty"`
	Contact           []*ExtendedContactDetail `json:"contact,omitempty"`
	Status            *string                  `json:"status,omitempty"`
	HoursOfOperation  []*Availability          `json:"hoursOfOperation,omitempty"`
	Identifier        []*Identifier            `json:"identifier,omitempty"`
	Alias             *string                  `json:"alias,omitempty"`
	Type              []*CodeableConcept       `json:"type,omitempty"`
	Description       *string                  `json:"description,omitempty"`
}

type LocationPosition struct {
	Altitude          *string      `json:"altitude,omitempty"`
	Extension         []*Extension `json:"extension,omitempty"`
	ID                *string      `json:"id,omitempty"`
	Latitude          *string      `json:"latitude,omitempty"`
	Longitude         *string      `json:"longitude,omitempty"`
	ModifierExtension []*Extension `json:"modifierExtension,omitempty"`
	ResourceType      *string      `json:"resourceType,omitempty"`
}

type MedicationAdministrationDosage struct {
	ID                *string          `json:"id,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	RateQuantity      *Quantity        `json:"rateQuantity,omitempty"`
	Text              *string          `json:"text,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	Dose              *Quantity        `json:"dose,omitempty"`
	Site              *CodeableConcept `json:"site,omitempty"`
	Method            *CodeableConcept `json:"method,omitempty"`
	RateRatio         *Ratio           `json:"rateRatio,omitempty"`
	Route             *CodeableConcept `json:"route,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
}

type MedicationAdministrationPerformer struct {
	ID                *string            `json:"id,omitempty"`
	ModifierExtension []*Extension       `json:"modifierExtension,omitempty"`
	ResourceType      *string            `json:"resourceType,omitempty"`
	Actor             *CodeableReference `json:"actor,omitempty"`
	Extension         []*Extension       `json:"extension,omitempty"`
	Function          *CodeableConcept   `json:"function,omitempty"`
}

type MedicationAdministrationType struct {
	SubPotentReason       []*CodeableConcept                     `json:"subPotentReason,omitempty"`
	Device                []*CodeableReference                   `json:"device,omitempty"`
	Category              []*CodeableConcept                     `json:"category,omitempty"`
	OccurenceDateTime     *string                                `json:"occurenceDateTime,omitempty"`
	Medication            *CodeableReference                     `json:"medication,omitempty"`
	OccurencePeriod       *Period                                `json:"occurencePeriod,omitempty"`
	IsSubPotent           *string                                `json:"isSubPotent,omitempty"`
	Identifier            []*Identifier                          `json:"identifier,omitempty"`
	Meta                  *Meta                                  `json:"meta,omitempty"`
	ModifierExtension     []*Extension                           `json:"modifierExtension,omitempty"`
	Dosage                *MedicationAdministrationDosage        `json:"dosage,omitempty"`
	Performer             []*MedicationAdministrationPerformer   `json:"performer,omitempty"`
	Status                *string                                `json:"status,omitempty"`
	Recorded              *string                                `json:"recorded,omitempty"`
	ID                    *string                                `json:"id,omitempty"`
	OccurenceTiming       *Timing                                `json:"occurenceTiming,omitempty"`
	Subject               []MedicationAdministrationSubjectUnion `json:"subject,omitempty"`
	Language              *string                                `json:"language,omitempty"`
	Request               []*MedicationRequestType               `json:"request,omitempty"`
	Note                  []MedicationAdministrationNoteUnion    `json:"note,omitempty"`
	Text                  *Narrative                             `json:"text,omitempty"`
	ResourceType          *string                                `json:"resourceType,omitempty"`
	StatusReason          []*CodeableConcept                     `json:"statusReason,omitempty"`
	ImplicitRules         *string                                `json:"implicitRules,omitempty"`
	PartOf                []MedicationAdministrationPartOfUnion  `json:"partOf,omitempty"`
	Reason                []*CodeableReference                   `json:"reason,omitempty"`
	SupportingInformation []ResourceUnion                        `json:"supportingInformation,omitempty"`
	Extension             []*Extension                           `json:"extension,omitempty"`
	Contained             []ResourceUnion                        `json:"contained,omitempty"`
}

func (MedicationAdministrationType) IsMedicationAdministrationPartOfUnion() {}

func (MedicationAdministrationType) IsObservationPartOfUnion() {}

func (MedicationAdministrationType) IsProcedurePartOfUnion() {}

func (MedicationAdministrationType) IsResourceUnion() {}

type MedicationBatch struct {
	ModifierExtension []*Extension `json:"modifierExtension,omitempty"`
	ResourceType      *string      `json:"resourceType,omitempty"`
	ExpirationDate    *string      `json:"expirationDate,omitempty"`
	Extension         []*Extension `json:"extension,omitempty"`
	ID                *string      `json:"id,omitempty"`
	LotNumber         *string      `json:"lotNumber,omitempty"`
}

type MedicationIngredient struct {
	StrengthCodeableConcept *CodeableConcept   `json:"strengthCodeableConcept,omitempty"`
	ID                      *string            `json:"id,omitempty"`
	ModifierExtension       []*Extension       `json:"modifierExtension,omitempty"`
	ResourceType            *string            `json:"resourceType,omitempty"`
	Extension               []*Extension       `json:"extension,omitempty"`
	IsActive                *string            `json:"isActive,omitempty"`
	Item                    *CodeableReference `json:"item,omitempty"`
	StrengthQuantity        *Quantity          `json:"strengthQuantity,omitempty"`
	StrengthRatio           *Ratio             `json:"strengthRatio,omitempty"`
}

type MedicationRequestDispenseRequest struct {
	ExpectedSupplyDuration *Duration                                                   `json:"expectedSupplyDuration,omitempty"`
	InitialFill            *MedicationRequestDispenseRequestInitialFill                `json:"initialFill,omitempty"`
	ModifierExtension      []*Extension                                                `json:"modifierExtension,omitempty"`
	ResourceType           *string                                                     `json:"resourceType,omitempty"`
	ValidityPeriod         *Period                                                     `json:"validityPeriod,omitempty"`
	DoseAdministrationAid  *CodeableConcept                                            `json:"doseAdministrationAid,omitempty"`
	ID                     *string                                                     `json:"id,omitempty"`
	DispenseInterval       *Duration                                                   `json:"dispenseInterval,omitempty"`
	Dispenser              []*OrganizationType                                         `json:"dispenser,omitempty"`
	DispenserInstruction   []MedicationRequestDispenseRequestDispenserInstructionUnion `json:"dispenserInstruction,omitempty"`
	Quantity               *Quantity                                                   `json:"quantity,omitempty"`
	Extension              []*Extension                                                `json:"extension,omitempty"`
	NumberOfRepeatsAllowed *string                                                     `json:"numberOfRepeatsAllowed,omitempty"`
}

type MedicationRequestDispenseRequestInitialFill struct {
	Duration          *Duration    `json:"duration,omitempty"`
	Extension         []*Extension `json:"extension,omitempty"`
	ID                *string      `json:"id,omitempty"`
	ModifierExtension []*Extension `json:"modifierExtension,omitempty"`
	Quantity          *Quantity    `json:"quantity,omitempty"`
	ResourceType      *string      `json:"resourceType,omitempty"`
}

type MedicationRequestSubstitution struct {
	Reason                 *CodeableConcept `json:"reason,omitempty"`
	ResourceType           *string          `json:"resourceType,omitempty"`
	AllowedBoolean         *string          `json:"allowedBoolean,omitempty"`
	AllowedCodeableConcept *CodeableConcept `json:"allowedCodeableConcept,omitempty"`
	Extension              []*Extension     `json:"extension,omitempty"`
	ID                     *string          `json:"id,omitempty"`
	ModifierExtension      []*Extension     `json:"modifierExtension,omitempty"`
}

type MedicationRequestType struct {
	Medication                *CodeableReference                        `json:"medication,omitempty"`
	ResourceType              *string                                   `json:"resourceType,omitempty"`
	Reason                    []*CodeableReference                      `json:"reason,omitempty"`
	StatusChanged             *string                                   `json:"statusChanged,omitempty"`
	CourseOfTherapyType       *CodeableConcept                          `json:"courseOfTherapyType,omitempty"`
	EffectiveDosePeriod       *Period                                   `json:"effectiveDosePeriod,omitempty"`
	Device                    []*CodeableReference                      `json:"device,omitempty"`
	SupportingInformation     []ResourceUnion                           `json:"supportingInformation,omitempty"`
	Performer                 []MedicationRequestPerformerUnion         `json:"performer,omitempty"`
	AuthoredOn                *string                                   `json:"authoredOn,omitempty"`
	Note                      []MedicationRequestNoteUnion              `json:"note,omitempty"`
	Text                      *Narrative                                `json:"text,omitempty"`
	ID                        *string                                   `json:"id,omitempty"`
	Language                  *string                                   `json:"language,omitempty"`
	Status                    *string                                   `json:"status,omitempty"`
	ImplicitRules             *string                                   `json:"implicitRules,omitempty"`
	Requester                 []MedicationRequestRequesterUnion         `json:"requester,omitempty"`
	GroupIdentifier           *Identifier                               `json:"groupIdentifier,omitempty"`
	StatusReason              *CodeableConcept                          `json:"statusReason,omitempty"`
	Intent                    *string                                   `json:"intent,omitempty"`
	DosageInstruction         []*Dosage                                 `json:"dosageInstruction,omitempty"`
	InformationSource         []MedicationRequestInformationSourceUnion `json:"informationSource,omitempty"`
	PerformerType             *CodeableConcept                          `json:"performerType,omitempty"`
	Identifier                []*Identifier                             `json:"identifier,omitempty"`
	ModifierExtension         []*Extension                              `json:"modifierExtension,omitempty"`
	Category                  []*CodeableConcept                        `json:"category,omitempty"`
	Recorder                  []MedicationRequestRecorderUnion          `json:"recorder,omitempty"`
	PriorPrescription         []*MedicationRequestType                  `json:"priorPrescription,omitempty"`
	Meta                      *Meta                                     `json:"meta,omitempty"`
	BasedOn                   []MedicationRequestBasedOnUnion           `json:"basedOn,omitempty"`
	Extension                 []*Extension                              `json:"extension,omitempty"`
	RenderedDosageInstruction *string                                   `json:"renderedDosageInstruction,omitempty"`
	Reported                  *string                                   `json:"reported,omitempty"`
	Substitution              *MedicationRequestSubstitution            `json:"substitution,omitempty"`
	DoNotPerform              *string                                   `json:"doNotPerform,omitempty"`
	Contained                 []ResourceUnion                           `json:"contained,omitempty"`
	Subject                   []MedicationRequestSubjectUnion           `json:"subject,omitempty"`
	DispenseRequest           *MedicationRequestDispenseRequest         `json:"dispenseRequest,omitempty"`
	Priority                  *string                                   `json:"priority,omitempty"`
}

func (MedicationRequestType) IsDocumentReferenceBasedOnUnion() {}

func (MedicationRequestType) IsMedicationRequestBasedOnUnion() {}

func (MedicationRequestType) IsObservationBasedOnUnion() {}

func (MedicationRequestType) IsDiagnosticReportBasedOnUnion() {}

func (MedicationRequestType) IsResourceUnion() {}

type MedicationStatementAdherence struct {
	Extension         []*Extension     `json:"extension,omitempty"`
	ID                *string          `json:"id,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	Reason            *CodeableConcept `json:"reason,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	Code              *CodeableConcept `json:"code,omitempty"`
}

type MedicationStatementType struct {
	RelatedClinicalInformation []MedicationStatementRelatedClinicalInformationUnion `json:"relatedClinicalInformation,omitempty"`
	Meta                       *Meta                                                `json:"meta,omitempty"`
	EffectivePeriod            *Period                                              `json:"effectivePeriod,omitempty"`
	Dosage                     []*Dosage                                            `json:"dosage,omitempty"`
	Category                   []*CodeableConcept                                   `json:"category,omitempty"`
	Contained                  []ResourceUnion                                      `json:"contained,omitempty"`
	EffectiveDateTime          *string                                              `json:"effectiveDateTime,omitempty"`
	Identifier                 []*Identifier                                        `json:"identifier,omitempty"`
	Note                       []MedicationStatementNoteUnion                       `json:"note,omitempty"`
	ImplicitRules              *string                                              `json:"implicitRules,omitempty"`
	Medication                 *CodeableReference                                   `json:"medication,omitempty"`
	RenderedDosageInstruction  *string                                              `json:"renderedDosageInstruction,omitempty"`
	DerivedFrom                []ResourceUnion                                      `json:"derivedFrom,omitempty"`
	Subject                    []MedicationStatementSubjectUnion                    `json:"subject,omitempty"`
	Adherence                  *MedicationStatementAdherence                        `json:"adherence,omitempty"`
	Reason                     []*CodeableReference                                 `json:"reason,omitempty"`
	Text                       *Narrative                                           `json:"text,omitempty"`
	Language                   *string                                              `json:"language,omitempty"`
	PartOf                     []MedicationStatementPartOfUnion                     `json:"partOf,omitempty"`
	ModifierExtension          []*Extension                                         `json:"modifierExtension,omitempty"`
	DateAsserted               *string                                              `json:"dateAsserted,omitempty"`
	Extension                  []*Extension                                         `json:"extension,omitempty"`
	ID                         *string                                              `json:"id,omitempty"`
	EffectiveTiming            *Timing                                              `json:"effectiveTiming,omitempty"`
	InformationSource          []MedicationStatementInformationSourceUnion          `json:"informationSource,omitempty"`
	Status                     *string                                              `json:"status,omitempty"`
	ResourceType               *string                                              `json:"resourceType,omitempty"`
}

func (MedicationStatementType) IsMedicationStatementPartOfUnion() {}

func (MedicationStatementType) IsObservationPartOfUnion() {}

func (MedicationStatementType) IsResourceUnion() {}

type MedicationType struct {
	DoseForm                     *CodeableConcept        `json:"doseForm,omitempty"`
	Code                         *CodeableConcept        `json:"code,omitempty"`
	Identifier                   []*Identifier           `json:"identifier,omitempty"`
	Text                         *Narrative              `json:"text,omitempty"`
	Meta                         *Meta                   `json:"meta,omitempty"`
	ResourceType                 *string                 `json:"resourceType,omitempty"`
	Status                       *string                 `json:"status,omitempty"`
	Language                     *string                 `json:"language,omitempty"`
	ModifierExtension            []*Extension            `json:"modifierExtension,omitempty"`
	Contained                    []ResourceUnion         `json:"contained,omitempty"`
	Batch                        *MedicationBatch        `json:"batch,omitempty"`
	ImplicitRules                *string                 `json:"implicitRules,omitempty"`
	TotalVolume                  *Quantity               `json:"totalVolume,omitempty"`
	Extension                    []*Extension            `json:"extension,omitempty"`
	Ingredient                   []*MedicationIngredient `json:"ingredient,omitempty"`
	ID                           *string                 `json:"id,omitempty"`
	MarketingAuthorizationHolder []*OrganizationType     `json:"marketingAuthorizationHolder,omitempty"`
}

func (MedicationType) IsObservationSubjectUnion() {}

func (MedicationType) IsResearchSubjectSubjectUnion() {}

func (MedicationType) IsDiagnosticReportSubjectUnion() {}

func (MedicationType) IsResourceUnion() {}

type Meta struct {
	Profile      *string      `json:"profile,omitempty"`
	Security     []*Coding    `json:"security,omitempty"`
	Source       *string      `json:"source,omitempty"`
	Tag          []*Coding    `json:"tag,omitempty"`
	VersionID    *string      `json:"versionId,omitempty"`
	LastUpdated  *string      `json:"lastUpdated,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
}

type Money struct {
	Currency     *string      `json:"currency,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	Value        *string      `json:"value,omitempty"`
}

type Narrative struct {
	Div          *string      `json:"div,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	Status       *string      `json:"status,omitempty"`
}

type ObservationComponent struct {
	ID                   *string                      `json:"id,omitempty"`
	ValuePeriod          *Period                      `json:"valuePeriod,omitempty"`
	ValueQuantity        *Quantity                    `json:"valueQuantity,omitempty"`
	ValueRange           *Range                       `json:"valueRange,omitempty"`
	ValueAttachment      *Attachment                  `json:"valueAttachment,omitempty"`
	Extension            []*Extension                 `json:"extension,omitempty"`
	ValueSampledData     *SampledData                 `json:"valueSampledData,omitempty"`
	ValueString          *string                      `json:"valueString,omitempty"`
	ModifierExtension    []*Extension                 `json:"modifierExtension,omitempty"`
	Code                 *CodeableConcept             `json:"code,omitempty"`
	DataAbsentReason     *CodeableConcept             `json:"dataAbsentReason,omitempty"`
	ValueBoolean         *string                      `json:"valueBoolean,omitempty"`
	ValueDateTime        *string                      `json:"valueDateTime,omitempty"`
	ValueInteger         *string                      `json:"valueInteger,omitempty"`
	ValueTime            *string                      `json:"valueTime,omitempty"`
	Interpretation       []*CodeableConcept           `json:"interpretation,omitempty"`
	ReferenceRange       []*ObservationReferenceRange `json:"referenceRange,omitempty"`
	ResourceType         *string                      `json:"resourceType,omitempty"`
	ValueCodeableConcept *CodeableConcept             `json:"valueCodeableConcept,omitempty"`
	ValueRatio           *Ratio                       `json:"valueRatio,omitempty"`
}

type ObservationReferenceRange struct {
	Extension         []*Extension       `json:"extension,omitempty"`
	High              *Quantity          `json:"high,omitempty"`
	ID                *string            `json:"id,omitempty"`
	Type              *CodeableConcept   `json:"type,omitempty"`
	AppliesTo         []*CodeableConcept `json:"appliesTo,omitempty"`
	Age               *Range             `json:"age,omitempty"`
	Text              *string            `json:"text,omitempty"`
	Low               *Quantity          `json:"low,omitempty"`
	NormalValue       *CodeableConcept   `json:"normalValue,omitempty"`
	ResourceType      *string            `json:"resourceType,omitempty"`
	ModifierExtension []*Extension       `json:"modifierExtension,omitempty"`
}

type ObservationTriggeredBy struct {
	ID                *string            `json:"id,omitempty"`
	ModifierExtension []*Extension       `json:"modifierExtension,omitempty"`
	Observation       []*ObservationType `json:"observation,omitempty"`
	Reason            *string            `json:"reason,omitempty"`
	ResourceType      *string            `json:"resourceType,omitempty"`
	Type              *string            `json:"type,omitempty"`
	Extension         []*Extension       `json:"extension,omitempty"`
}

type ObservationType struct {
	EffectivePeriod       *Period                       `json:"effectivePeriod,omitempty"`
	DerivedFrom           []ObservationDerivedFromUnion `json:"derivedFrom,omitempty"`
	EffectiveInstant      *string                       `json:"effectiveInstant,omitempty"`
	ValuePeriod           *Period                       `json:"valuePeriod,omitempty"`
	InstantiatesCanonical *string                       `json:"instantiatesCanonical,omitempty"`
	ReferenceRange        []*ObservationReferenceRange  `json:"referenceRange,omitempty"`
	Code                  *CodeableConcept              `json:"code,omitempty"`
	Category              []*CodeableConcept            `json:"category,omitempty"`
	ValueBoolean          *string                       `json:"valueBoolean,omitempty"`
	Performer             []ObservationPerformerUnion   `json:"performer,omitempty"`
	BodySite              *CodeableConcept              `json:"bodySite,omitempty"`
	Text                  *Narrative                    `json:"text,omitempty"`
	ValueQuantity         *Quantity                     `json:"valueQuantity,omitempty"`
	ValueString           *string                       `json:"valueString,omitempty"`
	ID                    *string                       `json:"id,omitempty"`
	ModifierExtension     []*Extension                  `json:"modifierExtension,omitempty"`
	Contained             []ResourceUnion               `json:"contained,omitempty"`
	ValueAttachment       *Attachment                   `json:"valueAttachment,omitempty"`
	Issued                *string                       `json:"issued,omitempty"`
	ImplicitRules         *string                       `json:"implicitRules,omitempty"`
	Meta                  *Meta                         `json:"meta,omitempty"`
	Method                *CodeableConcept              `json:"method,omitempty"`
	BodyStructure         []*BodyStructureType          `json:"bodyStructure,omitempty"`
	EffectiveDateTime     *string                       `json:"effectiveDateTime,omitempty"`
	ValueRatio            *Ratio                        `json:"valueRatio,omitempty"`
	Interpretation        []*CodeableConcept            `json:"interpretation,omitempty"`
	ValueDateTime         *string                       `json:"valueDateTime,omitempty"`
	ValueTime             *string                       `json:"valueTime,omitempty"`
	DataAbsentReason      *CodeableConcept              `json:"dataAbsentReason,omitempty"`
	ResourceType          *string                       `json:"resourceType,omitempty"`
	Note                  []ObservationNoteUnion        `json:"note,omitempty"`
	BasedOn               []ObservationBasedOnUnion     `json:"basedOn,omitempty"`
	Focus                 []ResourceUnion               `json:"focus,omitempty"`
	ValueCodeableConcept  *CodeableConcept              `json:"valueCodeableConcept,omitempty"`
	HasMember             []ObservationHasMemberUnion   `json:"hasMember,omitempty"`
	ValueInteger          *string                       `json:"valueInteger,omitempty"`
	Language              *string                       `json:"language,omitempty"`
	Identifier            []*Identifier                 `json:"identifier,omitempty"`
	ValueSampledData      *SampledData                  `json:"valueSampledData,omitempty"`
	Subject               []ObservationSubjectUnion     `json:"subject,omitempty"`
	Extension             []*Extension                  `json:"extension,omitempty"`
	TriggeredBy           []*ObservationTriggeredBy     `json:"triggeredBy,omitempty"`
	Specimen              []ObservationSpecimenUnion    `json:"specimen,omitempty"`
	PartOf                []ObservationPartOfUnion      `json:"partOf,omitempty"`
	Component             []*ObservationComponent       `json:"component,omitempty"`
	EffectiveTiming       *Timing                       `json:"effectiveTiming,omitempty"`
	ValueRange            *Range                        `json:"valueRange,omitempty"`
	Status                *string                       `json:"status,omitempty"`
}

func (ObservationType) IsMedicationStatementRelatedClinicalInformationUnion() {}

func (ObservationType) IsConditionStageUnion() {}

func (ObservationType) IsObservationDerivedFromUnion() {}

func (ObservationType) IsObservationHasMemberUnion() {}

func (ObservationType) IsProcedurePartOfUnion() {}

func (ObservationType) IsConditionStageAssessmentUnion() {}

func (ObservationType) IsDiagnosticReportSupportingInfoUnion() {}

func (ObservationType) IsDiagnosticReportSupportingInfoReferenceUnion() {}

func (ObservationType) IsResourceUnion() {}

type OrganizationQualification struct {
	Extension         []*Extension        `json:"extension,omitempty"`
	ID                *string             `json:"id,omitempty"`
	Identifier        []*Identifier       `json:"identifier,omitempty"`
	Issuer            []*OrganizationType `json:"issuer,omitempty"`
	ModifierExtension []*Extension        `json:"modifierExtension,omitempty"`
	Period            *Period             `json:"period,omitempty"`
	ResourceType      *string             `json:"resourceType,omitempty"`
	Code              *CodeableConcept    `json:"code,omitempty"`
}

type OrganizationType struct {
	Name              *string                      `json:"name,omitempty"`
	Contact           []*ExtendedContactDetail     `json:"contact,omitempty"`
	ImplicitRules     *string                      `json:"implicitRules,omitempty"`
	Type              []*CodeableConcept           `json:"type,omitempty"`
	Extension         []*Extension                 `json:"extension,omitempty"`
	Text              *Narrative                   `json:"text,omitempty"`
	Language          *string                      `json:"language,omitempty"`
	ResourceType      *string                      `json:"resourceType,omitempty"`
	PartOf            []*OrganizationType          `json:"partOf,omitempty"`
	Alias             *string                      `json:"alias,omitempty"`
	Contained         []ResourceUnion              `json:"contained,omitempty"`
	Meta              *Meta                        `json:"meta,omitempty"`
	ID                *string                      `json:"id,omitempty"`
	Qualification     []*OrganizationQualification `json:"qualification,omitempty"`
	Description       *string                      `json:"description,omitempty"`
	ModifierExtension []*Extension                 `json:"modifierExtension,omitempty"`
	Identifier        []*Identifier                `json:"identifier,omitempty"`
	Active            *string                      `json:"active,omitempty"`
}

func (OrganizationType) IsGroupManagingEntityUnion() {}

func (OrganizationType) IsGroupMemberUnion() {}

func (OrganizationType) IsProcedurePerformerActorUnion() {}

func (OrganizationType) IsSubstanceDefinitionNoteUnion() {}

func (OrganizationType) IsConditionParticipantActorUnion() {}

func (OrganizationType) IsFamilyMemberHistoryParticipantActorUnion() {}

func (OrganizationType) IsMedicationAdministrationNoteUnion() {}

func (OrganizationType) IsResearchStudyAssociatedPartyPartyUnion() {}

func (OrganizationType) IsDocumentReferenceAuthorUnion() {}

func (OrganizationType) IsDocumentReferenceAttesterUnion() {}

func (OrganizationType) IsSubstanceDefinitionCodeNoteUnion() {}

func (OrganizationType) IsMedicationRequestDispenseRequestDispenserInstructionUnion() {}

func (OrganizationType) IsSignatureOnBehalfOfUnion() {}

func (OrganizationType) IsSignatureWhoUnion() {}

func (OrganizationType) IsUsageContextValueReferenceUnion() {}

func (OrganizationType) IsFamilyMemberHistoryProcedureNoteUnion() {}

func (OrganizationType) IsTaskRestrictionRecipientUnion() {}

func (OrganizationType) IsSpecimenNoteUnion() {}

func (OrganizationType) IsMedicationRequestPerformerUnion() {}

func (OrganizationType) IsMedicationRequestRequesterUnion() {}

func (OrganizationType) IsMedicationRequestNoteUnion() {}

func (OrganizationType) IsMedicationRequestInformationSourceUnion() {}

func (OrganizationType) IsPatientGeneralPractitionerUnion() {}

func (OrganizationType) IsMedicationStatementInformationSourceUnion() {}

func (OrganizationType) IsMedicationStatementNoteUnion() {}

func (OrganizationType) IsGroupMemberEntityUnion() {}

func (OrganizationType) IsConditionNoteUnion() {}

func (OrganizationType) IsConditionParticipantUnion() {}

func (OrganizationType) IsFamilyMemberHistoryConditionNoteUnion() {}

func (OrganizationType) IsObservationSubjectUnion() {}

func (OrganizationType) IsObservationNoteUnion() {}

func (OrganizationType) IsObservationPerformerUnion() {}

func (OrganizationType) IsProcedureFocusUnion() {}

func (OrganizationType) IsProcedureReportedReferenceUnion() {}

func (OrganizationType) IsProcedureSubjectUnion() {}

func (OrganizationType) IsProcedureNoteUnion() {}

func (OrganizationType) IsProcedurePerformerUnion() {}

func (OrganizationType) IsImagingStudySeriesPerformerUnion() {}

func (OrganizationType) IsTaskPerformerActorUnion() {}

func (OrganizationType) IsFamilyMemberHistoryNoteUnion() {}

func (OrganizationType) IsFamilyMemberHistoryParticipantUnion() {}

func (OrganizationType) IsTaskInputValueAnnotationUnion() {}

func (OrganizationType) IsTaskInputValueSignatureUnion() {}

func (OrganizationType) IsTaskInputValueUsageContextUnion() {}

func (OrganizationType) IsImagingStudyNoteUnion() {}

func (OrganizationType) IsResearchStudyAssociatedPartyUnion() {}

func (OrganizationType) IsResearchStudyNoteUnion() {}

func (OrganizationType) IsResearchStudySiteUnion() {}

func (OrganizationType) IsDocumentReferenceAttesterPartyUnion() {}

func (OrganizationType) IsExtensionValueAnnotationUnion() {}

func (OrganizationType) IsExtensionValueSignatureUnion() {}

func (OrganizationType) IsExtensionValueUsageContextUnion() {}

func (OrganizationType) IsImagingStudySeriesPerformerActorUnion() {}

func (OrganizationType) IsDiagnosticReportNoteUnion() {}

func (OrganizationType) IsDiagnosticReportPerformerUnion() {}

func (OrganizationType) IsDiagnosticReportResultsInterpreterUnion() {}

func (OrganizationType) IsDiagnosticReportSubjectUnion() {}

func (OrganizationType) IsAnnotationAuthorReferenceUnion() {}

func (OrganizationType) IsTaskOutputValueAnnotationUnion() {}

func (OrganizationType) IsTaskOutputValueSignatureUnion() {}

func (OrganizationType) IsTaskOutputValueUsageContextUnion() {}

func (OrganizationType) IsTaskOwnerUnion() {}

func (OrganizationType) IsTaskRequesterUnion() {}

func (OrganizationType) IsTaskNoteUnion() {}

func (OrganizationType) IsTaskPerformerUnion() {}

func (OrganizationType) IsTaskRestrictionUnion() {}

func (OrganizationType) IsResourceUnion() {}

type ParameterDefinition struct {
	Profile       *string      `json:"profile,omitempty"`
	Min           *string      `json:"min,omitempty"`
	Name          *string      `json:"name,omitempty"`
	Type          *string      `json:"type,omitempty"`
	Documentation *string      `json:"documentation,omitempty"`
	Extension     []*Extension `json:"extension,omitempty"`
	ID            *string      `json:"id,omitempty"`
	Max           *string      `json:"max,omitempty"`
	ResourceType  *string      `json:"resourceType,omitempty"`
	Use           *string      `json:"use,omitempty"`
}

type PatientCommunication struct {
	ResourceType      *string          `json:"resourceType,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	ID                *string          `json:"id,omitempty"`
	Language          *CodeableConcept `json:"language,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	Preferred         *string          `json:"preferred,omitempty"`
}

type PatientContact struct {
	Relationship      []*CodeableConcept  `json:"relationship,omitempty"`
	Telecom           []*ContactPoint     `json:"telecom,omitempty"`
	Extension         []*Extension        `json:"extension,omitempty"`
	Name              *HumanName          `json:"name,omitempty"`
	Address           *Address            `json:"address,omitempty"`
	Gender            *string             `json:"gender,omitempty"`
	ID                *string             `json:"id,omitempty"`
	ModifierExtension []*Extension        `json:"modifierExtension,omitempty"`
	Organization      []*OrganizationType `json:"organization,omitempty"`
	ResourceType      *string             `json:"resourceType,omitempty"`
	Period            *Period             `json:"period,omitempty"`
}

type PatientLink struct {
	ModifierExtension []*Extension            `json:"modifierExtension,omitempty"`
	Other             []PatientLinkOtherUnion `json:"other,omitempty"`
	ResourceType      *string                 `json:"resourceType,omitempty"`
	Type              *string                 `json:"type,omitempty"`
	Extension         []*Extension            `json:"extension,omitempty"`
	ID                *string                 `json:"id,omitempty"`
}

type PatientType struct {
	ModifierExtension    []*Extension                      `json:"modifierExtension,omitempty"`
	Gender               *string                           `json:"gender,omitempty"`
	Extension            []*Extension                      `json:"extension,omitempty"`
	DeceasedBoolean      *string                           `json:"deceasedBoolean,omitempty"`
	Address              []*Address                        `json:"address,omitempty"`
	Link                 []PatientLinkUnion                `json:"link,omitempty"`
	Identifier           []*Identifier                     `json:"identifier,omitempty"`
	GeneralPractitioner  []PatientGeneralPractitionerUnion `json:"generalPractitioner,omitempty"`
	ImplicitRules        *string                           `json:"implicitRules,omitempty"`
	Meta                 *Meta                             `json:"meta,omitempty"`
	MultipleBirthInteger *string                           `json:"multipleBirthInteger,omitempty"`
	MultipleBirthBoolean *string                           `json:"multipleBirthBoolean,omitempty"`
	Text                 *Narrative                        `json:"text,omitempty"`
	ManagingOrganization []*OrganizationType               `json:"managingOrganization,omitempty"`
	Active               *string                           `json:"active,omitempty"`
	BirthDate            *string                           `json:"birthDate,omitempty"`
	DeceasedDateTime     *string                           `json:"deceasedDateTime,omitempty"`
	ID                   *string                           `json:"id,omitempty"`
	Name                 []*HumanName                      `json:"name,omitempty"`
	Photo                []*Attachment                     `json:"photo,omitempty"`
	Contained            []ResourceUnion                   `json:"contained,omitempty"`
	Contact              []*PatientContact                 `json:"contact,omitempty"`
	MaritalStatus        *CodeableConcept                  `json:"maritalStatus,omitempty"`
	Communication        []*PatientCommunication           `json:"communication,omitempty"`
	Telecom              []*ContactPoint                   `json:"telecom,omitempty"`
	Language             *string                           `json:"language,omitempty"`
	ResourceType         *string                           `json:"resourceType,omitempty"`
}

func (PatientType) IsGroupMemberUnion() {}

func (PatientType) IsProcedurePerformerActorUnion() {}

func (PatientType) IsSubstanceDefinitionNoteUnion() {}

func (PatientType) IsConditionParticipantActorUnion() {}

func (PatientType) IsFamilyMemberHistoryParticipantActorUnion() {}

func (PatientType) IsMedicationAdministrationNoteUnion() {}

func (PatientType) IsMedicationAdministrationSubjectUnion() {}

func (PatientType) IsPatientLinkOtherUnion() {}

func (PatientType) IsDocumentReferenceAuthorUnion() {}

func (PatientType) IsDocumentReferenceAttesterUnion() {}

func (PatientType) IsSubstanceDefinitionCodeNoteUnion() {}

func (PatientType) IsMedicationRequestDispenseRequestDispenserInstructionUnion() {}

func (PatientType) IsSignatureOnBehalfOfUnion() {}

func (PatientType) IsSignatureWhoUnion() {}

func (PatientType) IsFamilyMemberHistoryProcedureNoteUnion() {}

func (PatientType) IsTaskRestrictionRecipientUnion() {}

func (PatientType) IsSpecimenSubjectUnion() {}

func (PatientType) IsSpecimenCollectionUnion() {}

func (PatientType) IsSpecimenNoteUnion() {}

func (PatientType) IsSpecimenCollectionCollectorUnion() {}

func (PatientType) IsMedicationRequestPerformerUnion() {}

func (PatientType) IsMedicationRequestRequesterUnion() {}

func (PatientType) IsMedicationRequestSubjectUnion() {}

func (PatientType) IsMedicationRequestNoteUnion() {}

func (PatientType) IsMedicationRequestInformationSourceUnion() {}

func (PatientType) IsPatientLinkUnion() {}

func (PatientType) IsMedicationStatementInformationSourceUnion() {}

func (PatientType) IsMedicationStatementSubjectUnion() {}

func (PatientType) IsMedicationStatementNoteUnion() {}

func (PatientType) IsGroupMemberEntityUnion() {}

func (PatientType) IsConditionSubjectUnion() {}

func (PatientType) IsConditionNoteUnion() {}

func (PatientType) IsConditionParticipantUnion() {}

func (PatientType) IsFamilyMemberHistoryConditionNoteUnion() {}

func (PatientType) IsObservationSubjectUnion() {}

func (PatientType) IsObservationNoteUnion() {}

func (PatientType) IsObservationPerformerUnion() {}

func (PatientType) IsProcedureFocusUnion() {}

func (PatientType) IsProcedureRecorderUnion() {}

func (PatientType) IsProcedureReportedReferenceUnion() {}

func (PatientType) IsProcedureSubjectUnion() {}

func (PatientType) IsProcedureNoteUnion() {}

func (PatientType) IsProcedurePerformerUnion() {}

func (PatientType) IsResearchSubjectSubjectUnion() {}

func (PatientType) IsImagingStudySeriesPerformerUnion() {}

func (PatientType) IsTaskPerformerActorUnion() {}

func (PatientType) IsFamilyMemberHistoryNoteUnion() {}

func (PatientType) IsFamilyMemberHistoryParticipantUnion() {}

func (PatientType) IsTaskInputValueAnnotationUnion() {}

func (PatientType) IsTaskInputValueSignatureUnion() {}

func (PatientType) IsImagingStudySubjectUnion() {}

func (PatientType) IsImagingStudyNoteUnion() {}

func (PatientType) IsResearchStudyNoteUnion() {}

func (PatientType) IsDocumentReferenceAttesterPartyUnion() {}

func (PatientType) IsExtensionValueAnnotationUnion() {}

func (PatientType) IsExtensionValueSignatureUnion() {}

func (PatientType) IsImagingStudySeriesPerformerActorUnion() {}

func (PatientType) IsDiagnosticReportNoteUnion() {}

func (PatientType) IsDiagnosticReportSubjectUnion() {}

func (PatientType) IsAnnotationAuthorReferenceUnion() {}

func (PatientType) IsTaskOutputValueAnnotationUnion() {}

func (PatientType) IsTaskOutputValueSignatureUnion() {}

func (PatientType) IsTaskOwnerUnion() {}

func (PatientType) IsTaskRequesterUnion() {}

func (PatientType) IsTaskNoteUnion() {}

func (PatientType) IsTaskPerformerUnion() {}

func (PatientType) IsTaskRestrictionUnion() {}

func (PatientType) IsResourceUnion() {}

type Period struct {
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	Start        *string      `json:"start,omitempty"`
	End          *string      `json:"end,omitempty"`
}

type PractitionerCommunication struct {
	Preferred         *string          `json:"preferred,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	ID                *string          `json:"id,omitempty"`
	Language          *CodeableConcept `json:"language,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
}

type PractitionerQualification struct {
	Issuer            []*OrganizationType `json:"issuer,omitempty"`
	ModifierExtension []*Extension        `json:"modifierExtension,omitempty"`
	Period            *Period             `json:"period,omitempty"`
	ResourceType      *string             `json:"resourceType,omitempty"`
	Code              *CodeableConcept    `json:"code,omitempty"`
	Extension         []*Extension        `json:"extension,omitempty"`
	ID                *string             `json:"id,omitempty"`
	Identifier        []*Identifier       `json:"identifier,omitempty"`
}

type PractitionerRoleType struct {
	Availability      []*Availability          `json:"availability,omitempty"`
	Identifier        []*Identifier            `json:"identifier,omitempty"`
	Practitioner      []*PractitionerType      `json:"practitioner,omitempty"`
	Contained         []ResourceUnion          `json:"contained,omitempty"`
	Language          *string                  `json:"language,omitempty"`
	Code              []*CodeableConcept       `json:"code,omitempty"`
	ImplicitRules     *string                  `json:"implicitRules,omitempty"`
	Specialty         []*CodeableConcept       `json:"specialty,omitempty"`
	ID                *string                  `json:"id,omitempty"`
	ResourceType      *string                  `json:"resourceType,omitempty"`
	Extension         []*Extension             `json:"extension,omitempty"`
	Organization      []*OrganizationType      `json:"organization,omitempty"`
	ModifierExtension []*Extension             `json:"modifierExtension,omitempty"`
	Communication     []*CodeableConcept       `json:"communication,omitempty"`
	Active            *string                  `json:"active,omitempty"`
	Characteristic    []*CodeableConcept       `json:"characteristic,omitempty"`
	Contact           []*ExtendedContactDetail `json:"contact,omitempty"`
	Meta              *Meta                    `json:"meta,omitempty"`
	Period            *Period                  `json:"period,omitempty"`
	Text              *Narrative               `json:"text,omitempty"`
}

func (PractitionerRoleType) IsGroupManagingEntityUnion() {}

func (PractitionerRoleType) IsGroupMemberUnion() {}

func (PractitionerRoleType) IsProcedurePerformerActorUnion() {}

func (PractitionerRoleType) IsSubstanceDefinitionNoteUnion() {}

func (PractitionerRoleType) IsConditionParticipantActorUnion() {}

func (PractitionerRoleType) IsFamilyMemberHistoryParticipantActorUnion() {}

func (PractitionerRoleType) IsMedicationAdministrationNoteUnion() {}

func (PractitionerRoleType) IsResearchStudyAssociatedPartyPartyUnion() {}

func (PractitionerRoleType) IsDocumentReferenceAuthorUnion() {}

func (PractitionerRoleType) IsDocumentReferenceAttesterUnion() {}

func (PractitionerRoleType) IsSubstanceDefinitionCodeNoteUnion() {}

func (PractitionerRoleType) IsMedicationRequestDispenseRequestDispenserInstructionUnion() {}

func (PractitionerRoleType) IsSignatureOnBehalfOfUnion() {}

func (PractitionerRoleType) IsSignatureWhoUnion() {}

func (PractitionerRoleType) IsFamilyMemberHistoryProcedureNoteUnion() {}

func (PractitionerRoleType) IsTaskRestrictionRecipientUnion() {}

func (PractitionerRoleType) IsSpecimenCollectionUnion() {}

func (PractitionerRoleType) IsSpecimenNoteUnion() {}

func (PractitionerRoleType) IsSpecimenCollectionCollectorUnion() {}

func (PractitionerRoleType) IsMedicationRequestPerformerUnion() {}

func (PractitionerRoleType) IsMedicationRequestRecorderUnion() {}

func (PractitionerRoleType) IsMedicationRequestRequesterUnion() {}

func (PractitionerRoleType) IsMedicationRequestNoteUnion() {}

func (PractitionerRoleType) IsMedicationRequestInformationSourceUnion() {}

func (PractitionerRoleType) IsPatientGeneralPractitionerUnion() {}

func (PractitionerRoleType) IsMedicationStatementInformationSourceUnion() {}

func (PractitionerRoleType) IsMedicationStatementNoteUnion() {}

func (PractitionerRoleType) IsGroupMemberEntityUnion() {}

func (PractitionerRoleType) IsConditionNoteUnion() {}

func (PractitionerRoleType) IsConditionParticipantUnion() {}

func (PractitionerRoleType) IsFamilyMemberHistoryConditionNoteUnion() {}

func (PractitionerRoleType) IsObservationNoteUnion() {}

func (PractitionerRoleType) IsObservationPerformerUnion() {}

func (PractitionerRoleType) IsProcedureFocusUnion() {}

func (PractitionerRoleType) IsProcedureRecorderUnion() {}

func (PractitionerRoleType) IsProcedureReportedReferenceUnion() {}

func (PractitionerRoleType) IsProcedureNoteUnion() {}

func (PractitionerRoleType) IsProcedurePerformerUnion() {}

func (PractitionerRoleType) IsImagingStudySeriesPerformerUnion() {}

func (PractitionerRoleType) IsTaskPerformerActorUnion() {}

func (PractitionerRoleType) IsFamilyMemberHistoryNoteUnion() {}

func (PractitionerRoleType) IsFamilyMemberHistoryParticipantUnion() {}

func (PractitionerRoleType) IsTaskInputValueAnnotationUnion() {}

func (PractitionerRoleType) IsTaskInputValueSignatureUnion() {}

func (PractitionerRoleType) IsImagingStudyReferrerUnion() {}

func (PractitionerRoleType) IsImagingStudyNoteUnion() {}

func (PractitionerRoleType) IsResearchStudyAssociatedPartyUnion() {}

func (PractitionerRoleType) IsResearchStudyNoteUnion() {}

func (PractitionerRoleType) IsDocumentReferenceAttesterPartyUnion() {}

func (PractitionerRoleType) IsExtensionValueAnnotationUnion() {}

func (PractitionerRoleType) IsExtensionValueSignatureUnion() {}

func (PractitionerRoleType) IsImagingStudySeriesPerformerActorUnion() {}

func (PractitionerRoleType) IsDiagnosticReportNoteUnion() {}

func (PractitionerRoleType) IsDiagnosticReportPerformerUnion() {}

func (PractitionerRoleType) IsDiagnosticReportResultsInterpreterUnion() {}

func (PractitionerRoleType) IsAnnotationAuthorReferenceUnion() {}

func (PractitionerRoleType) IsTaskOutputValueAnnotationUnion() {}

func (PractitionerRoleType) IsTaskOutputValueSignatureUnion() {}

func (PractitionerRoleType) IsTaskOwnerUnion() {}

func (PractitionerRoleType) IsTaskRequesterUnion() {}

func (PractitionerRoleType) IsTaskNoteUnion() {}

func (PractitionerRoleType) IsTaskPerformerUnion() {}

func (PractitionerRoleType) IsTaskRestrictionUnion() {}

func (PractitionerRoleType) IsResourceUnion() {}

type PractitionerType struct {
	Meta              *Meta                        `json:"meta,omitempty"`
	DeceasedBoolean   *string                      `json:"deceasedBoolean,omitempty"`
	BirthDate         *string                      `json:"birthDate,omitempty"`
	ID                *string                      `json:"id,omitempty"`
	Extension         []*Extension                 `json:"extension,omitempty"`
	Gender            *string                      `json:"gender,omitempty"`
	Qualification     []*PractitionerQualification `json:"qualification,omitempty"`
	Contained         []ResourceUnion              `json:"contained,omitempty"`
	Telecom           []*ContactPoint              `json:"telecom,omitempty"`
	Identifier        []*Identifier                `json:"identifier,omitempty"`
	Address           []*Address                   `json:"address,omitempty"`
	ModifierExtension []*Extension                 `json:"modifierExtension,omitempty"`
	ResourceType      *string                      `json:"resourceType,omitempty"`
	ImplicitRules     *string                      `json:"implicitRules,omitempty"`
	Language          *string                      `json:"language,omitempty"`
	Name              []*HumanName                 `json:"name,omitempty"`
	Photo             []*Attachment                `json:"photo,omitempty"`
	Text              *Narrative                   `json:"text,omitempty"`
	Active            *string                      `json:"active,omitempty"`
	Communication     []*PractitionerCommunication `json:"communication,omitempty"`
	DeceasedDateTime  *string                      `json:"deceasedDateTime,omitempty"`
}

func (PractitionerType) IsGroupManagingEntityUnion() {}

func (PractitionerType) IsGroupMemberUnion() {}

func (PractitionerType) IsProcedurePerformerActorUnion() {}

func (PractitionerType) IsSubstanceDefinitionNoteUnion() {}

func (PractitionerType) IsConditionParticipantActorUnion() {}

func (PractitionerType) IsFamilyMemberHistoryParticipantActorUnion() {}

func (PractitionerType) IsMedicationAdministrationNoteUnion() {}

func (PractitionerType) IsResearchStudyAssociatedPartyPartyUnion() {}

func (PractitionerType) IsDocumentReferenceAuthorUnion() {}

func (PractitionerType) IsDocumentReferenceAttesterUnion() {}

func (PractitionerType) IsSubstanceDefinitionCodeNoteUnion() {}

func (PractitionerType) IsMedicationRequestDispenseRequestDispenserInstructionUnion() {}

func (PractitionerType) IsSignatureOnBehalfOfUnion() {}

func (PractitionerType) IsSignatureWhoUnion() {}

func (PractitionerType) IsFamilyMemberHistoryProcedureNoteUnion() {}

func (PractitionerType) IsTaskRestrictionRecipientUnion() {}

func (PractitionerType) IsSpecimenCollectionUnion() {}

func (PractitionerType) IsSpecimenNoteUnion() {}

func (PractitionerType) IsSpecimenCollectionCollectorUnion() {}

func (PractitionerType) IsMedicationRequestPerformerUnion() {}

func (PractitionerType) IsMedicationRequestRecorderUnion() {}

func (PractitionerType) IsMedicationRequestRequesterUnion() {}

func (PractitionerType) IsMedicationRequestNoteUnion() {}

func (PractitionerType) IsMedicationRequestInformationSourceUnion() {}

func (PractitionerType) IsPatientGeneralPractitionerUnion() {}

func (PractitionerType) IsMedicationStatementInformationSourceUnion() {}

func (PractitionerType) IsMedicationStatementNoteUnion() {}

func (PractitionerType) IsGroupMemberEntityUnion() {}

func (PractitionerType) IsConditionNoteUnion() {}

func (PractitionerType) IsConditionParticipantUnion() {}

func (PractitionerType) IsFamilyMemberHistoryConditionNoteUnion() {}

func (PractitionerType) IsObservationSubjectUnion() {}

func (PractitionerType) IsObservationNoteUnion() {}

func (PractitionerType) IsObservationPerformerUnion() {}

func (PractitionerType) IsProcedureFocusUnion() {}

func (PractitionerType) IsProcedureRecorderUnion() {}

func (PractitionerType) IsProcedureReportedReferenceUnion() {}

func (PractitionerType) IsProcedureSubjectUnion() {}

func (PractitionerType) IsProcedureNoteUnion() {}

func (PractitionerType) IsProcedurePerformerUnion() {}

func (PractitionerType) IsImagingStudySeriesPerformerUnion() {}

func (PractitionerType) IsTaskPerformerActorUnion() {}

func (PractitionerType) IsFamilyMemberHistoryNoteUnion() {}

func (PractitionerType) IsFamilyMemberHistoryParticipantUnion() {}

func (PractitionerType) IsTaskInputValueAnnotationUnion() {}

func (PractitionerType) IsTaskInputValueSignatureUnion() {}

func (PractitionerType) IsImagingStudyReferrerUnion() {}

func (PractitionerType) IsImagingStudyNoteUnion() {}

func (PractitionerType) IsResearchStudyAssociatedPartyUnion() {}

func (PractitionerType) IsResearchStudyNoteUnion() {}

func (PractitionerType) IsDocumentReferenceAttesterPartyUnion() {}

func (PractitionerType) IsExtensionValueAnnotationUnion() {}

func (PractitionerType) IsExtensionValueSignatureUnion() {}

func (PractitionerType) IsImagingStudySeriesPerformerActorUnion() {}

func (PractitionerType) IsDiagnosticReportNoteUnion() {}

func (PractitionerType) IsDiagnosticReportPerformerUnion() {}

func (PractitionerType) IsDiagnosticReportResultsInterpreterUnion() {}

func (PractitionerType) IsDiagnosticReportSubjectUnion() {}

func (PractitionerType) IsAnnotationAuthorReferenceUnion() {}

func (PractitionerType) IsTaskOutputValueAnnotationUnion() {}

func (PractitionerType) IsTaskOutputValueSignatureUnion() {}

func (PractitionerType) IsTaskOwnerUnion() {}

func (PractitionerType) IsTaskRequesterUnion() {}

func (PractitionerType) IsTaskNoteUnion() {}

func (PractitionerType) IsTaskPerformerUnion() {}

func (PractitionerType) IsTaskRestrictionUnion() {}

func (PractitionerType) IsResourceUnion() {}

type ProcedureFocalDevice struct {
	Action            *CodeableConcept `json:"action,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	ID                *string          `json:"id,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
}

type ProcedurePerformer struct {
	Function          *CodeableConcept               `json:"function,omitempty"`
	ID                *string                        `json:"id,omitempty"`
	ModifierExtension []*Extension                   `json:"modifierExtension,omitempty"`
	OnBehalfOf        []*OrganizationType            `json:"onBehalfOf,omitempty"`
	Period            *Period                        `json:"period,omitempty"`
	ResourceType      *string                        `json:"resourceType,omitempty"`
	Actor             []ProcedurePerformerActorUnion `json:"actor,omitempty"`
	Extension         []*Extension                   `json:"extension,omitempty"`
}

type ProcedureType struct {
	ResourceType          *string                           `json:"resourceType,omitempty"`
	Recorder              []ProcedureRecorderUnion          `json:"recorder,omitempty"`
	OccurrenceTiming      *Timing                           `json:"occurrenceTiming,omitempty"`
	OccurrenceString      *string                           `json:"occurrenceString,omitempty"`
	Outcome               *CodeableConcept                  `json:"outcome,omitempty"`
	Reason                []*CodeableReference              `json:"reason,omitempty"`
	ReportedReference     []ProcedureReportedReferenceUnion `json:"reportedReference,omitempty"`
	OccurrencePeriod      *Period                           `json:"occurrencePeriod,omitempty"`
	ReportedBoolean       *string                           `json:"reportedBoolean,omitempty"`
	Extension             []*Extension                      `json:"extension,omitempty"`
	Report                []ProcedureReportUnion            `json:"report,omitempty"`
	Code                  *CodeableConcept                  `json:"code,omitempty"`
	Category              []*CodeableConcept                `json:"category,omitempty"`
	Used                  []*CodeableReference              `json:"used,omitempty"`
	Recorded              *string                           `json:"recorded,omitempty"`
	PartOf                []ProcedurePartOfUnion            `json:"partOf,omitempty"`
	StatusReason          *CodeableConcept                  `json:"statusReason,omitempty"`
	ModifierExtension     []*Extension                      `json:"modifierExtension,omitempty"`
	OccurrenceRange       *Range                            `json:"occurrenceRange,omitempty"`
	FollowUp              []*CodeableConcept                `json:"followUp,omitempty"`
	OccurrenceAge         *Age                              `json:"occurrenceAge,omitempty"`
	BodySite              []*CodeableConcept                `json:"bodySite,omitempty"`
	ID                    *string                           `json:"id,omitempty"`
	FocalDevice           []*ProcedureFocalDevice           `json:"focalDevice,omitempty"`
	Text                  *Narrative                        `json:"text,omitempty"`
	Meta                  *Meta                             `json:"meta,omitempty"`
	SupportingInfo        []ResourceUnion                   `json:"supportingInfo,omitempty"`
	Language              *string                           `json:"language,omitempty"`
	Note                  []ProcedureNoteUnion              `json:"note,omitempty"`
	Status                *string                           `json:"status,omitempty"`
	ImplicitRules         *string                           `json:"implicitRules,omitempty"`
	Contained             []ResourceUnion                   `json:"contained,omitempty"`
	Performer             []ProcedurePerformerUnion         `json:"performer,omitempty"`
	InstantiatesCanonical *string                           `json:"instantiatesCanonical,omitempty"`
	Complication          []*CodeableReference              `json:"complication,omitempty"`
	OccurrenceDateTime    *string                           `json:"occurrenceDateTime,omitempty"`
	Identifier            []*Identifier                     `json:"identifier,omitempty"`
	InstantiatesURI       *string                           `json:"instantiatesUri,omitempty"`
	Subject               []ProcedureSubjectUnion           `json:"subject,omitempty"`
	Focus                 []ProcedureFocusUnion             `json:"focus,omitempty"`
}

func (ProcedureType) IsMedicationAdministrationPartOfUnion() {}

func (ProcedureType) IsMedicationStatementPartOfUnion() {}

func (ProcedureType) IsObservationSubjectUnion() {}

func (ProcedureType) IsObservationPartOfUnion() {}

func (ProcedureType) IsProcedurePartOfUnion() {}

func (ProcedureType) IsDiagnosticReportSupportingInfoUnion() {}

func (ProcedureType) IsDiagnosticReportSupportingInfoReferenceUnion() {}

func (ProcedureType) IsResourceUnion() {}

type Quantity struct {
	Code         *string      `json:"code,omitempty"`
	Comparator   *string      `json:"comparator,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	System       *string      `json:"system,omitempty"`
	Unit         *string      `json:"unit,omitempty"`
	Value        *string      `json:"value,omitempty"`
}

type Query struct {
}

type Range struct {
	ResourceType *string      `json:"resourceType,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	High         *Quantity    `json:"high,omitempty"`
	ID           *string      `json:"id,omitempty"`
	Low          *Quantity    `json:"low,omitempty"`
}

type Ratio struct {
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	Numerator    *Quantity    `json:"numerator,omitempty"`
	ResourceType *string      `json:"resourceType,omitempty"`
	Denominator  *Quantity    `json:"denominator,omitempty"`
}

type RatioRange struct {
	ResourceType  *string      `json:"resourceType,omitempty"`
	Denominator   *Quantity    `json:"denominator,omitempty"`
	Extension     []*Extension `json:"extension,omitempty"`
	HighNumerator *Quantity    `json:"highNumerator,omitempty"`
	ID            *string      `json:"id,omitempty"`
	LowNumerator  *Quantity    `json:"lowNumerator,omitempty"`
}

type Reference struct {
	ResourceType *string      `json:"resourceType,omitempty"`
	Type         *string      `json:"type,omitempty"`
	Display      *string      `json:"display,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	Identifier   *Identifier  `json:"identifier,omitempty"`
	Reference    *string      `json:"reference,omitempty"`
}

type RelatedArtifact struct {
	Display           *string            `json:"display,omitempty"`
	PublicationDate   *string            `json:"publicationDate,omitempty"`
	PublicationStatus *string            `json:"publicationStatus,omitempty"`
	Classifier        []*CodeableConcept `json:"classifier,omitempty"`
	Document          *Attachment        `json:"document,omitempty"`
	ResourceReference []ResourceUnion    `json:"resourceReference,omitempty"`
	Extension         []*Extension       `json:"extension,omitempty"`
	ID                *string            `json:"id,omitempty"`
	Label             *string            `json:"label,omitempty"`
	Citation          *string            `json:"citation,omitempty"`
	Resource          *string            `json:"resource,omitempty"`
	Type              *string            `json:"type,omitempty"`
	ResourceType      *string            `json:"resourceType,omitempty"`
}

type ResearchStudyAssociatedParty struct {
	Party             []ResearchStudyAssociatedPartyPartyUnion `json:"party,omitempty"`
	Extension         []*Extension                             `json:"extension,omitempty"`
	ModifierExtension []*Extension                             `json:"modifierExtension,omitempty"`
	Name              *string                                  `json:"name,omitempty"`
	Role              *CodeableConcept                         `json:"role,omitempty"`
	ID                *string                                  `json:"id,omitempty"`
	Period            []*Period                                `json:"period,omitempty"`
	ResourceType      *string                                  `json:"resourceType,omitempty"`
	Classifier        []*CodeableConcept                       `json:"classifier,omitempty"`
}

type ResearchStudyComparisonGroup struct {
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	ObservedGroup     []*GroupType     `json:"observedGroup,omitempty"`
	Name              *string          `json:"name,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	ID                *string          `json:"id,omitempty"`
	Description       *string          `json:"description,omitempty"`
	LinkID            *string          `json:"linkId,omitempty"`
	Type              *CodeableConcept `json:"type,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
}

type ResearchStudyLabel struct {
	Value             *string          `json:"value,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	ID                *string          `json:"id,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	Type              *CodeableConcept `json:"type,omitempty"`
}

type ResearchStudyObjective struct {
	Description       *string          `json:"description,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	ID                *string          `json:"id,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	Name              *string          `json:"name,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	Type              *CodeableConcept `json:"type,omitempty"`
}

type ResearchStudyOutcomeMeasure struct {
	ID                *string            `json:"id,omitempty"`
	ModifierExtension []*Extension       `json:"modifierExtension,omitempty"`
	Name              *string            `json:"name,omitempty"`
	ResourceType      *string            `json:"resourceType,omitempty"`
	Type              []*CodeableConcept `json:"type,omitempty"`
	Description       *string            `json:"description,omitempty"`
	Extension         []*Extension       `json:"extension,omitempty"`
}

type ResearchStudyProgressStatus struct {
	ResourceType      *string          `json:"resourceType,omitempty"`
	State             *CodeableConcept `json:"state,omitempty"`
	Actual            *string          `json:"actual,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	ID                *string          `json:"id,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	Period            *Period          `json:"period,omitempty"`
}

type ResearchStudyRecruitment struct {
	TargetNumber      *string                                    `json:"targetNumber,omitempty"`
	ActualGroup       []*GroupType                               `json:"actualGroup,omitempty"`
	ActualNumber      *string                                    `json:"actualNumber,omitempty"`
	Eligibility       []ResearchStudyRecruitmentEligibilityUnion `json:"eligibility,omitempty"`
	Extension         []*Extension                               `json:"extension,omitempty"`
	ID                *string                                    `json:"id,omitempty"`
	ModifierExtension []*Extension                               `json:"modifierExtension,omitempty"`
	ResourceType      *string                                    `json:"resourceType,omitempty"`
}

type ResearchStudyType struct {
	Region             []*CodeableConcept                  `json:"region,omitempty"`
	Title              *string                             `json:"title,omitempty"`
	Condition          []*CodeableConcept                  `json:"condition,omitempty"`
	Contained          []ResourceUnion                     `json:"contained,omitempty"`
	Period             *Period                             `json:"period,omitempty"`
	DescriptionSummary *string                             `json:"descriptionSummary,omitempty"`
	PrimaryPurposeType *CodeableConcept                    `json:"primaryPurposeType,omitempty"`
	ComparisonGroup    []*ResearchStudyComparisonGroup     `json:"comparisonGroup,omitempty"`
	WhyStopped         *CodeableConcept                    `json:"whyStopped,omitempty"`
	Date               *string                             `json:"date,omitempty"`
	Recruitment        []ResearchStudyRecruitmentUnion     `json:"recruitment,omitempty"`
	Classifier         []*CodeableConcept                  `json:"classifier,omitempty"`
	Phase              *CodeableConcept                    `json:"phase,omitempty"`
	Language           *string                             `json:"language,omitempty"`
	Meta               *Meta                               `json:"meta,omitempty"`
	Name               *string                             `json:"name,omitempty"`
	Text               *Narrative                          `json:"text,omitempty"`
	Result             []ResearchStudyResultUnion          `json:"result,omitempty"`
	ProgressStatus     []*ResearchStudyProgressStatus      `json:"progressStatus,omitempty"`
	ModifierExtension  []*Extension                        `json:"modifierExtension,omitempty"`
	AssociatedParty    []ResearchStudyAssociatedPartyUnion `json:"associatedParty,omitempty"`
	Description        *string                             `json:"description,omitempty"`
	Site               []ResearchStudySiteUnion            `json:"site,omitempty"`
	URL                *string                             `json:"url,omitempty"`
	ImplicitRules      *string                             `json:"implicitRules,omitempty"`
	Version            *string                             `json:"version,omitempty"`
	OutcomeMeasure     []*ResearchStudyOutcomeMeasure      `json:"outcomeMeasure,omitempty"`
	ID                 *string                             `json:"id,omitempty"`
	Identifier         []*Identifier                       `json:"identifier,omitempty"`
	Objective          []*ResearchStudyObjective           `json:"objective,omitempty"`
	ResourceType       *string                             `json:"resourceType,omitempty"`
	Keyword            []*CodeableConcept                  `json:"keyword,omitempty"`
	Note               []ResearchStudyNoteUnion            `json:"note,omitempty"`
	Status             *string                             `json:"status,omitempty"`
	Label              []*ResearchStudyLabel               `json:"label,omitempty"`
	RelatedArtifact    []*RelatedArtifact                  `json:"relatedArtifact,omitempty"`
	StudyDesign        []*CodeableConcept                  `json:"studyDesign,omitempty"`
	Extension          []*Extension                        `json:"extension,omitempty"`
	Focus              []*CodeableReference                `json:"focus,omitempty"`
	PartOf             []*ResearchStudyType                `json:"partOf,omitempty"`
}

func (ResearchStudyType) IsUsageContextValueReferenceUnion() {}

func (ResearchStudyType) IsTaskInputValueUsageContextUnion() {}

func (ResearchStudyType) IsResearchStudySiteUnion() {}

func (ResearchStudyType) IsExtensionValueUsageContextUnion() {}

func (ResearchStudyType) IsTaskOutputValueUsageContextUnion() {}

func (ResearchStudyType) IsResourceUnion() {}

type ResearchSubjectProgress struct {
	EndDate           *string          `json:"endDate,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	Type              *CodeableConcept `json:"type,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	Milestone         *CodeableConcept `json:"milestone,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	Reason            *CodeableConcept `json:"reason,omitempty"`
	StartDate         *string          `json:"startDate,omitempty"`
	SubjectState      *CodeableConcept `json:"subjectState,omitempty"`
	ID                *string          `json:"id,omitempty"`
}

type ResearchSubjectType struct {
	Subject                 []ResearchSubjectSubjectUnion `json:"subject,omitempty"`
	Text                    *Narrative                    `json:"text,omitempty"`
	ResourceType            *string                       `json:"resourceType,omitempty"`
	ImplicitRules           *string                       `json:"implicitRules,omitempty"`
	Meta                    *Meta                         `json:"meta,omitempty"`
	Status                  *string                       `json:"status,omitempty"`
	ID                      *string                       `json:"id,omitempty"`
	Contained               []ResourceUnion               `json:"contained,omitempty"`
	Identifier              []*Identifier                 `json:"identifier,omitempty"`
	Progress                []*ResearchSubjectProgress    `json:"progress,omitempty"`
	ActualComparisonGroup   *string                       `json:"actualComparisonGroup,omitempty"`
	Language                *string                       `json:"language,omitempty"`
	ModifierExtension       []*Extension                  `json:"modifierExtension,omitempty"`
	Study                   []*ResearchStudyType          `json:"study,omitempty"`
	Extension               []*Extension                  `json:"extension,omitempty"`
	Period                  *Period                       `json:"period,omitempty"`
	AssignedComparisonGroup *string                       `json:"assignedComparisonGroup,omitempty"`
}

func (ResearchSubjectType) IsResourceUnion() {}

type SampledData struct {
	ResourceType *string      `json:"resourceType,omitempty"`
	Origin       *Quantity    `json:"origin,omitempty"`
	CodeMap      *string      `json:"codeMap,omitempty"`
	IntervalUnit *string      `json:"intervalUnit,omitempty"`
	LowerLimit   *string      `json:"lowerLimit,omitempty"`
	UpperLimit   *string      `json:"upperLimit,omitempty"`
	Extension    []*Extension `json:"extension,omitempty"`
	ID           *string      `json:"id,omitempty"`
	Dimensions   *string      `json:"dimensions,omitempty"`
	Factor       *string      `json:"factor,omitempty"`
	Interval     *string      `json:"interval,omitempty"`
	Offsets      *string      `json:"offsets,omitempty"`
	Data         *string      `json:"data,omitempty"`
}

type Signature struct {
	Who          []SignatureWhoUnion        `json:"who,omitempty"`
	Data         *string                    `json:"data,omitempty"`
	ResourceType *string                    `json:"resourceType,omitempty"`
	SigFormat    *string                    `json:"sigFormat,omitempty"`
	ID           *string                    `json:"id,omitempty"`
	When         *string                    `json:"when,omitempty"`
	OnBehalfOf   []SignatureOnBehalfOfUnion `json:"onBehalfOf,omitempty"`
	Type         []*Coding                  `json:"type,omitempty"`
	Extension    []*Extension               `json:"extension,omitempty"`
	TargetFormat *string                    `json:"targetFormat,omitempty"`
}

type SpecimenCollection struct {
	Extension                    []*Extension                       `json:"extension,omitempty"`
	Method                       *CodeableConcept                   `json:"method,omitempty"`
	ModifierExtension            []*Extension                       `json:"modifierExtension,omitempty"`
	Quantity                     *Quantity                          `json:"quantity,omitempty"`
	BodySite                     *CodeableReference                 `json:"bodySite,omitempty"`
	Collector                    []SpecimenCollectionCollectorUnion `json:"collector,omitempty"`
	FastingStatusCodeableConcept *CodeableConcept                   `json:"fastingStatusCodeableConcept,omitempty"`
	CollectedPeriod              *Period                            `json:"collectedPeriod,omitempty"`
	FastingStatusDuration        *Duration                          `json:"fastingStatusDuration,omitempty"`
	Procedure                    []*ProcedureType                   `json:"procedure,omitempty"`
	Device                       *CodeableReference                 `json:"device,omitempty"`
	CollectedDateTime            *string                            `json:"collectedDateTime,omitempty"`
	Duration                     *Duration                          `json:"duration,omitempty"`
	ID                           *string                            `json:"id,omitempty"`
	ResourceType                 *string                            `json:"resourceType,omitempty"`
}

type SpecimenContainer struct {
	ModifierExtension []*Extension `json:"modifierExtension,omitempty"`
	ResourceType      *string      `json:"resourceType,omitempty"`
	SpecimenQuantity  *Quantity    `json:"specimenQuantity,omitempty"`
	Extension         []*Extension `json:"extension,omitempty"`
	ID                *string      `json:"id,omitempty"`
}

type SpecimenFeature struct {
	Extension         []*Extension     `json:"extension,omitempty"`
	ID                *string          `json:"id,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	Type              *CodeableConcept `json:"type,omitempty"`
	Description       *string          `json:"description,omitempty"`
}

type SpecimenProcessing struct {
	TimePeriod        *Period          `json:"timePeriod,omitempty"`
	Additive          []*SubstanceType `json:"additive,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	Description       *string          `json:"description,omitempty"`
	ID                *string          `json:"id,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	Method            *CodeableConcept `json:"method,omitempty"`
	TimeDateTime      *string          `json:"timeDateTime,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
}

type SpecimenType struct {
	Identifier          []*Identifier             `json:"identifier,omitempty"`
	Text                *Narrative                `json:"text,omitempty"`
	Contained           []ResourceUnion           `json:"contained,omitempty"`
	Combined            *string                   `json:"combined,omitempty"`
	Role                []*CodeableConcept        `json:"role,omitempty"`
	Extension           []*Extension              `json:"extension,omitempty"`
	Type                *CodeableConcept          `json:"type,omitempty"`
	ResourceType        *string                   `json:"resourceType,omitempty"`
	ID                  *string                   `json:"id,omitempty"`
	Parent              []*SpecimenType           `json:"parent,omitempty"`
	ModifierExtension   []*Extension              `json:"modifierExtension,omitempty"`
	Status              *string                   `json:"status,omitempty"`
	Condition           []*CodeableConcept        `json:"condition,omitempty"`
	Meta                *Meta                     `json:"meta,omitempty"`
	ReceivedTime        *string                   `json:"receivedTime,omitempty"`
	Feature             []*SpecimenFeature        `json:"feature,omitempty"`
	Collection          []SpecimenCollectionUnion `json:"collection,omitempty"`
	Subject             []SpecimenSubjectUnion    `json:"subject,omitempty"`
	AccessionIdentifier *Identifier               `json:"accessionIdentifier,omitempty"`
	Container           []*SpecimenContainer      `json:"container,omitempty"`
	Language            *string                   `json:"language,omitempty"`
	Processing          []*SpecimenProcessing     `json:"processing,omitempty"`
	ImplicitRules       *string                   `json:"implicitRules,omitempty"`
	Note                []SpecimenNoteUnion       `json:"note,omitempty"`
}

func (SpecimenType) IsGroupMemberUnion() {}

func (SpecimenType) IsGroupMemberEntityUnion() {}

func (SpecimenType) IsObservationSpecimenUnion() {}

func (SpecimenType) IsProcedureFocusUnion() {}

func (SpecimenType) IsResearchSubjectSubjectUnion() {}

func (SpecimenType) IsResourceUnion() {}

type SubstanceDefinitionCharacterization struct {
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	Technique         *CodeableConcept `json:"technique,omitempty"`
	Description       *string          `json:"description,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	File              []*Attachment    `json:"file,omitempty"`
	Form              *CodeableConcept `json:"form,omitempty"`
	ID                *string          `json:"id,omitempty"`
}

type SubstanceDefinitionCode struct {
	Source            []*DocumentReferenceType           `json:"source,omitempty"`
	Status            *CodeableConcept                   `json:"status,omitempty"`
	ResourceType      *string                            `json:"resourceType,omitempty"`
	ModifierExtension []*Extension                       `json:"modifierExtension,omitempty"`
	StatusDate        *string                            `json:"statusDate,omitempty"`
	Extension         []*Extension                       `json:"extension,omitempty"`
	Note              []SubstanceDefinitionCodeNoteUnion `json:"note,omitempty"`
	Code              *CodeableConcept                   `json:"code,omitempty"`
	ID                *string                            `json:"id,omitempty"`
}

type SubstanceDefinitionMoiety struct {
	MeasurementType   *CodeableConcept `json:"measurementType,omitempty"`
	Name              *string          `json:"name,omitempty"`
	AmountString      *string          `json:"amountString,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	Identifier        *Identifier      `json:"identifier,omitempty"`
	MolecularFormula  *string          `json:"molecularFormula,omitempty"`
	OpticalActivity   *CodeableConcept `json:"opticalActivity,omitempty"`
	Stereochemistry   *CodeableConcept `json:"stereochemistry,omitempty"`
	Role              *CodeableConcept `json:"role,omitempty"`
	ID                *string          `json:"id,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	AmountQuantity    *Quantity        `json:"amountQuantity,omitempty"`
}

type SubstanceDefinitionMolecularWeight struct {
	ID                *string          `json:"id,omitempty"`
	Method            *CodeableConcept `json:"method,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	Type              *CodeableConcept `json:"type,omitempty"`
	Amount            *Quantity        `json:"amount,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
}

type SubstanceDefinitionName struct {
	Status            *CodeableConcept                   `json:"status,omitempty"`
	Synonym           []*SubstanceDefinitionName         `json:"synonym,omitempty"`
	ModifierExtension []*Extension                       `json:"modifierExtension,omitempty"`
	Translation       []*SubstanceDefinitionName         `json:"translation,omitempty"`
	Type              *CodeableConcept                   `json:"type,omitempty"`
	Official          []*SubstanceDefinitionNameOfficial `json:"official,omitempty"`
	Name              *string                            `json:"name,omitempty"`
	ID                *string                            `json:"id,omitempty"`
	Language          []*CodeableConcept                 `json:"language,omitempty"`
	Domain            []*CodeableConcept                 `json:"domain,omitempty"`
	Extension         []*Extension                       `json:"extension,omitempty"`
	Jurisdiction      []*CodeableConcept                 `json:"jurisdiction,omitempty"`
	Preferred         *string                            `json:"preferred,omitempty"`
	Source            []*DocumentReferenceType           `json:"source,omitempty"`
	ResourceType      *string                            `json:"resourceType,omitempty"`
}

type SubstanceDefinitionNameOfficial struct {
	ResourceType      *string          `json:"resourceType,omitempty"`
	Status            *CodeableConcept `json:"status,omitempty"`
	Authority         *CodeableConcept `json:"authority,omitempty"`
	Date              *string          `json:"date,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	ID                *string          `json:"id,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
}

type SubstanceDefinitionProperty struct {
	Extension            []*Extension     `json:"extension,omitempty"`
	ModifierExtension    []*Extension     `json:"modifierExtension,omitempty"`
	ValueAttachment      *Attachment      `json:"valueAttachment,omitempty"`
	ValueQuantity        *Quantity        `json:"valueQuantity,omitempty"`
	ID                   *string          `json:"id,omitempty"`
	ResourceType         *string          `json:"resourceType,omitempty"`
	Type                 *CodeableConcept `json:"type,omitempty"`
	ValueBoolean         *string          `json:"valueBoolean,omitempty"`
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept,omitempty"`
	ValueDate            *string          `json:"valueDate,omitempty"`
}

type SubstanceDefinitionRelationship struct {
	SubstanceDefinitionReference       []*SubstanceDefinitionType `json:"substanceDefinitionReference,omitempty"`
	AmountQuantity                     *Quantity                  `json:"amountQuantity,omitempty"`
	AmountRatio                        *Ratio                     `json:"amountRatio,omitempty"`
	ID                                 *string                    `json:"id,omitempty"`
	RatioHighLimitAmount               *Ratio                     `json:"ratioHighLimitAmount,omitempty"`
	Source                             []*DocumentReferenceType   `json:"source,omitempty"`
	ResourceType                       *string                    `json:"resourceType,omitempty"`
	AmountString                       *string                    `json:"amountString,omitempty"`
	IsDefining                         *string                    `json:"isDefining,omitempty"`
	ModifierExtension                  []*Extension               `json:"modifierExtension,omitempty"`
	Comparator                         *CodeableConcept           `json:"comparator,omitempty"`
	Type                               *CodeableConcept           `json:"type,omitempty"`
	Extension                          []*Extension               `json:"extension,omitempty"`
	SubstanceDefinitionCodeableConcept *CodeableConcept           `json:"substanceDefinitionCodeableConcept,omitempty"`
}

type SubstanceDefinitionSourceMaterial struct {
	Genus             *CodeableConcept   `json:"genus,omitempty"`
	Type              *CodeableConcept   `json:"type,omitempty"`
	Extension         []*Extension       `json:"extension,omitempty"`
	ModifierExtension []*Extension       `json:"modifierExtension,omitempty"`
	ResourceType      *string            `json:"resourceType,omitempty"`
	CountryOfOrigin   []*CodeableConcept `json:"countryOfOrigin,omitempty"`
	ID                *string            `json:"id,omitempty"`
	Species           *CodeableConcept   `json:"species,omitempty"`
	Part              *CodeableConcept   `json:"part,omitempty"`
}

type SubstanceDefinitionStructure struct {
	SourceDocument           []*DocumentReferenceType                      `json:"sourceDocument,omitempty"`
	ModifierExtension        []*Extension                                  `json:"modifierExtension,omitempty"`
	MolecularFormula         *string                                       `json:"molecularFormula,omitempty"`
	ResourceType             *string                                       `json:"resourceType,omitempty"`
	ID                       *string                                       `json:"id,omitempty"`
	Stereochemistry          *CodeableConcept                              `json:"stereochemistry,omitempty"`
	Technique                []*CodeableConcept                            `json:"technique,omitempty"`
	OpticalActivity          *CodeableConcept                              `json:"opticalActivity,omitempty"`
	MolecularFormulaByMoiety *string                                       `json:"molecularFormulaByMoiety,omitempty"`
	MolecularWeight          *SubstanceDefinitionMolecularWeight           `json:"molecularWeight,omitempty"`
	Representation           []*SubstanceDefinitionStructureRepresentation `json:"representation,omitempty"`
	Extension                []*Extension                                  `json:"extension,omitempty"`
}

type SubstanceDefinitionStructureRepresentation struct {
	Document          []*DocumentReferenceType `json:"document,omitempty"`
	Extension         []*Extension             `json:"extension,omitempty"`
	Format            *CodeableConcept         `json:"format,omitempty"`
	ID                *string                  `json:"id,omitempty"`
	ModifierExtension []*Extension             `json:"modifierExtension,omitempty"`
	Representation    *string                  `json:"representation,omitempty"`
	ResourceType      *string                  `json:"resourceType,omitempty"`
	Type              *CodeableConcept         `json:"type,omitempty"`
}

type SubstanceDefinitionType struct {
	Text              *Narrative                             `json:"text,omitempty"`
	Moiety            []*SubstanceDefinitionMoiety           `json:"moiety,omitempty"`
	ImplicitRules     *string                                `json:"implicitRules,omitempty"`
	ModifierExtension []*Extension                           `json:"modifierExtension,omitempty"`
	Characterization  []*SubstanceDefinitionCharacterization `json:"characterization,omitempty"`
	Supplier          []*OrganizationType                    `json:"supplier,omitempty"`
	Note              []SubstanceDefinitionNoteUnion         `json:"note,omitempty"`
	Description       *string                                `json:"description,omitempty"`
	Structure         *SubstanceDefinitionStructure          `json:"structure,omitempty"`
	ID                *string                                `json:"id,omitempty"`
	Language          *string                                `json:"language,omitempty"`
	Contained         []ResourceUnion                        `json:"contained,omitempty"`
	Domain            *CodeableConcept                       `json:"domain,omitempty"`
	Extension         []*Extension                           `json:"extension,omitempty"`
	Identifier        []*Identifier                          `json:"identifier,omitempty"`
	Version           *string                                `json:"version,omitempty"`
	Relationship      []*SubstanceDefinitionRelationship     `json:"relationship,omitempty"`
	Manufacturer      []*OrganizationType                    `json:"manufacturer,omitempty"`
	Grade             []*CodeableConcept                     `json:"grade,omitempty"`
	ResourceType      *string                                `json:"resourceType,omitempty"`
	Name              []*SubstanceDefinitionName             `json:"name,omitempty"`
	Status            *CodeableConcept                       `json:"status,omitempty"`
	Meta              *Meta                                  `json:"meta,omitempty"`
	MolecularWeight   []*SubstanceDefinitionMolecularWeight  `json:"molecularWeight,omitempty"`
	SourceMaterial    *SubstanceDefinitionSourceMaterial     `json:"sourceMaterial,omitempty"`
	Classification    []*CodeableConcept                     `json:"classification,omitempty"`
	Code              []*SubstanceDefinitionCode             `json:"code,omitempty"`
	Property          []*SubstanceDefinitionProperty         `json:"property,omitempty"`
}

func (SubstanceDefinitionType) IsResourceUnion() {}

type SubstanceIngredient struct {
	SubstanceReference       []*SubstanceType `json:"substanceReference,omitempty"`
	Extension                []*Extension     `json:"extension,omitempty"`
	ID                       *string          `json:"id,omitempty"`
	ModifierExtension        []*Extension     `json:"modifierExtension,omitempty"`
	Quantity                 *Ratio           `json:"quantity,omitempty"`
	ResourceType             *string          `json:"resourceType,omitempty"`
	SubstanceCodeableConcept *CodeableConcept `json:"substanceCodeableConcept,omitempty"`
}

type SubstanceType struct {
	ID                *string                `json:"id,omitempty"`
	Language          *string                `json:"language,omitempty"`
	Ingredient        []*SubstanceIngredient `json:"ingredient,omitempty"`
	Category          []*CodeableConcept     `json:"category,omitempty"`
	Identifier        []*Identifier          `json:"identifier,omitempty"`
	Contained         []ResourceUnion        `json:"contained,omitempty"`
	ResourceType      *string                `json:"resourceType,omitempty"`
	Instance          *string                `json:"instance,omitempty"`
	ImplicitRules     *string                `json:"implicitRules,omitempty"`
	ModifierExtension []*Extension           `json:"modifierExtension,omitempty"`
	Expiry            *string                `json:"expiry,omitempty"`
	Description       *string                `json:"description,omitempty"`
	Status            *string                `json:"status,omitempty"`
	Meta              *Meta                  `json:"meta,omitempty"`
	Code              *CodeableReference     `json:"code,omitempty"`
	Extension         []*Extension           `json:"extension,omitempty"`
	Quantity          *Quantity              `json:"quantity,omitempty"`
	Text              *Narrative             `json:"text,omitempty"`
}

func (SubstanceType) IsSpecimenSubjectUnion() {}

func (SubstanceType) IsObservationSubjectUnion() {}

func (SubstanceType) IsResearchSubjectSubjectUnion() {}

func (SubstanceType) IsDiagnosticReportSubjectUnion() {}

func (SubstanceType) IsResourceUnion() {}

type TaskInput struct {
	ValueAddress               *Address                          `json:"valueAddress,omitempty"`
	ValueURL                   *string                           `json:"valueUrl,omitempty"`
	ValueDosage                *Dosage                           `json:"valueDosage,omitempty"`
	ValueRelatedArtifact       *RelatedArtifact                  `json:"valueRelatedArtifact,omitempty"`
	ValueDateTime              *string                           `json:"valueDateTime,omitempty"`
	ValueExpression            *Expression                       `json:"valueExpression,omitempty"`
	ValueCanonical             *string                           `json:"valueCanonical,omitempty"`
	ValueContactPoint          *ContactPoint                     `json:"valueContactPoint,omitempty"`
	ValueUnsignedInt           *string                           `json:"valueUnsignedInt,omitempty"`
	ValueInstant               *string                           `json:"valueInstant,omitempty"`
	ValueMoney                 *Money                            `json:"valueMoney,omitempty"`
	ValueParameterDefinition   *ParameterDefinition              `json:"valueParameterDefinition,omitempty"`
	ValueUUID                  *string                           `json:"valueUuid,omitempty"`
	ValueAttachment            *Attachment                       `json:"valueAttachment,omitempty"`
	ValueUsageContext          []TaskInputValueUsageContextUnion `json:"valueUsageContext,omitempty"`
	ValueTime                  *string                           `json:"valueTime,omitempty"`
	ValueURI                   *string                           `json:"valueUri,omitempty"`
	ValueSignature             []TaskInputValueSignatureUnion    `json:"valueSignature,omitempty"`
	ValueQuantity              *Quantity                         `json:"valueQuantity,omitempty"`
	ValueContactDetail         *ContactDetail                    `json:"valueContactDetail,omitempty"`
	ValueMeta                  *Meta                             `json:"valueMeta,omitempty"`
	ValueCode                  *string                           `json:"valueCode,omitempty"`
	ValueTriggerDefinition     *TriggerDefinition                `json:"valueTriggerDefinition,omitempty"`
	ValueOid                   *string                           `json:"valueOid,omitempty"`
	ValueInteger64             *string                           `json:"valueInteger64,omitempty"`
	ValueDataRequirement       *DataRequirement                  `json:"valueDataRequirement,omitempty"`
	ValueBoolean               *string                           `json:"valueBoolean,omitempty"`
	ValueCoding                *Coding                           `json:"valueCoding,omitempty"`
	ValueDecimal               *string                           `json:"valueDecimal,omitempty"`
	ValueAnnotation            []TaskInputValueAnnotationUnion   `json:"valueAnnotation,omitempty"`
	ValueCount                 *Count                            `json:"valueCount,omitempty"`
	ValueBase64Binary          *string                           `json:"valueBase64Binary,omitempty"`
	ValueCodeableReference     *CodeableReference                `json:"valueCodeableReference,omitempty"`
	ValueDistance              *Distance                         `json:"valueDistance,omitempty"`
	ValueHumanName             *HumanName                        `json:"valueHumanName,omitempty"`
	ValueID                    *string                           `json:"valueId,omitempty"`
	ResourceType               *string                           `json:"resourceType,omitempty"`
	ValueRatio                 *Ratio                            `json:"valueRatio,omitempty"`
	ValueExtendedContactDetail *ExtendedContactDetail            `json:"valueExtendedContactDetail,omitempty"`
	ValueRatioRange            *RatioRange                       `json:"valueRatioRange,omitempty"`
	ValueMarkdown              *string                           `json:"valueMarkdown,omitempty"`
	Type                       *CodeableConcept                  `json:"type,omitempty"`
	ID                         *string                           `json:"id,omitempty"`
	ValueSampledData           *SampledData                      `json:"valueSampledData,omitempty"`
	Extension                  []*Extension                      `json:"extension,omitempty"`
	ModifierExtension          []*Extension                      `json:"modifierExtension,omitempty"`
	ValueTiming                *Timing                           `json:"valueTiming,omitempty"`
	ValueIdentifier            *Identifier                       `json:"valueIdentifier,omitempty"`
	ValuePositiveInt           *string                           `json:"valuePositiveInt,omitempty"`
	ValueAvailability          *Availability                     `json:"valueAvailability,omitempty"`
	ValueDuration              *Duration                         `json:"valueDuration,omitempty"`
	ValueString                *string                           `json:"valueString,omitempty"`
	ValueCodeableConcept       *CodeableConcept                  `json:"valueCodeableConcept,omitempty"`
	ValueAge                   *Age                              `json:"valueAge,omitempty"`
	ValueDate                  *string                           `json:"valueDate,omitempty"`
	ValuePeriod                *Period                           `json:"valuePeriod,omitempty"`
	ValueInteger               *string                           `json:"valueInteger,omitempty"`
	ValueRange                 *Range                            `json:"valueRange,omitempty"`
}

type TaskOutput struct {
	ValuePeriod                *Period                            `json:"valuePeriod,omitempty"`
	ID                         *string                            `json:"id,omitempty"`
	ValueString                *string                            `json:"valueString,omitempty"`
	ValueOid                   *string                            `json:"valueOid,omitempty"`
	ValueRatio                 *Ratio                             `json:"valueRatio,omitempty"`
	ValueAge                   *Age                               `json:"valueAge,omitempty"`
	ValueSampledData           *SampledData                       `json:"valueSampledData,omitempty"`
	ValueBase64Binary          *string                            `json:"valueBase64Binary,omitempty"`
	ValueMeta                  *Meta                              `json:"valueMeta,omitempty"`
	ValueSignature             []TaskOutputValueSignatureUnion    `json:"valueSignature,omitempty"`
	ValueTime                  *string                            `json:"valueTime,omitempty"`
	ValueDistance              *Distance                          `json:"valueDistance,omitempty"`
	ValueDate                  *string                            `json:"valueDate,omitempty"`
	ValueTiming                *Timing                            `json:"valueTiming,omitempty"`
	ValueAnnotation            []TaskOutputValueAnnotationUnion   `json:"valueAnnotation,omitempty"`
	ValueCanonical             *string                            `json:"valueCanonical,omitempty"`
	ValueMarkdown              *string                            `json:"valueMarkdown,omitempty"`
	ValueURL                   *string                            `json:"valueUrl,omitempty"`
	ValueContactDetail         *ContactDetail                     `json:"valueContactDetail,omitempty"`
	ValueCodeableConcept       *CodeableConcept                   `json:"valueCodeableConcept,omitempty"`
	ValueUUID                  *string                            `json:"valueUuid,omitempty"`
	ValueInstant               *string                            `json:"valueInstant,omitempty"`
	ValueExpression            *Expression                        `json:"valueExpression,omitempty"`
	ValueUnsignedInt           *string                            `json:"valueUnsignedInt,omitempty"`
	Type                       *CodeableConcept                   `json:"type,omitempty"`
	ValueParameterDefinition   *ParameterDefinition               `json:"valueParameterDefinition,omitempty"`
	ValueMoney                 *Money                             `json:"valueMoney,omitempty"`
	Extension                  []*Extension                       `json:"extension,omitempty"`
	ValueExtendedContactDetail *ExtendedContactDetail             `json:"valueExtendedContactDetail,omitempty"`
	ValueCode                  *string                            `json:"valueCode,omitempty"`
	ValueIdentifier            *Identifier                        `json:"valueIdentifier,omitempty"`
	ValueHumanName             *HumanName                         `json:"valueHumanName,omitempty"`
	ValueDuration              *Duration                          `json:"valueDuration,omitempty"`
	ValueInteger64             *string                            `json:"valueInteger64,omitempty"`
	ValueURI                   *string                            `json:"valueUri,omitempty"`
	ValueContactPoint          *ContactPoint                      `json:"valueContactPoint,omitempty"`
	ValueCount                 *Count                             `json:"valueCount,omitempty"`
	ValueCodeableReference     *CodeableReference                 `json:"valueCodeableReference,omitempty"`
	ValueRelatedArtifact       *RelatedArtifact                   `json:"valueRelatedArtifact,omitempty"`
	ValueID                    *string                            `json:"valueId,omitempty"`
	ValueDosage                *Dosage                            `json:"valueDosage,omitempty"`
	ValueBoolean               *string                            `json:"valueBoolean,omitempty"`
	ValueAttachment            *Attachment                        `json:"valueAttachment,omitempty"`
	ValueTriggerDefinition     *TriggerDefinition                 `json:"valueTriggerDefinition,omitempty"`
	ResourceType               *string                            `json:"resourceType,omitempty"`
	ValuePositiveInt           *string                            `json:"valuePositiveInt,omitempty"`
	ValueRange                 *Range                             `json:"valueRange,omitempty"`
	ValueAddress               *Address                           `json:"valueAddress,omitempty"`
	ValueInteger               *string                            `json:"valueInteger,omitempty"`
	ValueAvailability          *Availability                      `json:"valueAvailability,omitempty"`
	ValueUsageContext          []TaskOutputValueUsageContextUnion `json:"valueUsageContext,omitempty"`
	ValueDateTime              *string                            `json:"valueDateTime,omitempty"`
	ValueDataRequirement       *DataRequirement                   `json:"valueDataRequirement,omitempty"`
	ModifierExtension          []*Extension                       `json:"modifierExtension,omitempty"`
	ValueCoding                *Coding                            `json:"valueCoding,omitempty"`
	ValueRatioRange            *RatioRange                        `json:"valueRatioRange,omitempty"`
	ValueDecimal               *string                            `json:"valueDecimal,omitempty"`
	ValueQuantity              *Quantity                          `json:"valueQuantity,omitempty"`
}

type TaskPerformer struct {
	ID                *string                   `json:"id,omitempty"`
	ModifierExtension []*Extension              `json:"modifierExtension,omitempty"`
	ResourceType      *string                   `json:"resourceType,omitempty"`
	Actor             []TaskPerformerActorUnion `json:"actor,omitempty"`
	Extension         []*Extension              `json:"extension,omitempty"`
	Function          *CodeableConcept          `json:"function,omitempty"`
}

type TaskRestriction struct {
	ResourceType      *string                         `json:"resourceType,omitempty"`
	Extension         []*Extension                    `json:"extension,omitempty"`
	ID                *string                         `json:"id,omitempty"`
	ModifierExtension []*Extension                    `json:"modifierExtension,omitempty"`
	Period            *Period                         `json:"period,omitempty"`
	Recipient         []TaskRestrictionRecipientUnion `json:"recipient,omitempty"`
	Repetitions       *string                         `json:"repetitions,omitempty"`
}

type TaskType struct {
	Input                 []*TaskInput           `json:"input,omitempty"`
	BasedOn               []ResourceUnion        `json:"basedOn,omitempty"`
	Output                []*TaskOutput          `json:"output,omitempty"`
	LastModified          *string                `json:"lastModified,omitempty"`
	AuthoredOn            *string                `json:"authoredOn,omitempty"`
	ModifierExtension     []*Extension           `json:"modifierExtension,omitempty"`
	Requester             []TaskRequesterUnion   `json:"requester,omitempty"`
	Intent                *string                `json:"intent,omitempty"`
	PartOf                []*TaskType            `json:"partOf,omitempty"`
	BusinessStatus        *CodeableConcept       `json:"businessStatus,omitempty"`
	ResourceType          *string                `json:"resourceType,omitempty"`
	Code                  *CodeableConcept       `json:"code,omitempty"`
	InstantiatesURI       *string                `json:"instantiatesUri,omitempty"`
	InstantiatesCanonical *string                `json:"instantiatesCanonical,omitempty"`
	Reason                []*CodeableReference   `json:"reason,omitempty"`
	Contained             []ResourceUnion        `json:"contained,omitempty"`
	RequestedPeriod       *Period                `json:"requestedPeriod,omitempty"`
	GroupIdentifier       *Identifier            `json:"groupIdentifier,omitempty"`
	Priority              *string                `json:"priority,omitempty"`
	Text                  *Narrative             `json:"text,omitempty"`
	Identifier            []*Identifier          `json:"identifier,omitempty"`
	Description           *string                `json:"description,omitempty"`
	Performer             []TaskPerformerUnion   `json:"performer,omitempty"`
	ID                    *string                `json:"id,omitempty"`
	ImplicitRules         *string                `json:"implicitRules,omitempty"`
	Meta                  *Meta                  `json:"meta,omitempty"`
	Restriction           []TaskRestrictionUnion `json:"restriction,omitempty"`
	Note                  []TaskNoteUnion        `json:"note,omitempty"`
	ExecutionPeriod       *Period                `json:"executionPeriod,omitempty"`
	Language              *string                `json:"language,omitempty"`
	RequestedPerformer    []*CodeableReference   `json:"requestedPerformer,omitempty"`
	Status                *string                `json:"status,omitempty"`
	Extension             []*Extension           `json:"extension,omitempty"`
	Focus                 []ResourceUnion        `json:"focus,omitempty"`
	Owner                 []TaskOwnerUnion       `json:"owner,omitempty"`
	StatusReason          *CodeableReference     `json:"statusReason,omitempty"`
	DoNotPerform          *string                `json:"doNotPerform,omitempty"`
}

func (TaskType) IsImagingStudyBasedOnUnion() {}

func (TaskType) IsResourceUnion() {}

type Timing struct {
	Repeat            *TimingRepeat    `json:"repeat,omitempty"`
	ResourceType      *string          `json:"resourceType,omitempty"`
	Code              *CodeableConcept `json:"code,omitempty"`
	Event             *string          `json:"event,omitempty"`
	Extension         []*Extension     `json:"extension,omitempty"`
	ID                *string          `json:"id,omitempty"`
	ModifierExtension []*Extension     `json:"modifierExtension,omitempty"`
}

type TimingRepeat struct {
	BoundsRange    *Range       `json:"boundsRange,omitempty"`
	CountMax       *string      `json:"countMax,omitempty"`
	DurationUnit   *string      `json:"durationUnit,omitempty"`
	Duration       *string      `json:"duration,omitempty"`
	PeriodUnit     *string      `json:"periodUnit,omitempty"`
	ResourceType   *string      `json:"resourceType,omitempty"`
	Count          *string      `json:"count,omitempty"`
	Extension      []*Extension `json:"extension,omitempty"`
	When           *string      `json:"when,omitempty"`
	ID             *string      `json:"id,omitempty"`
	DurationMax    *string      `json:"durationMax,omitempty"`
	Period         *string      `json:"period,omitempty"`
	BoundsDuration *Duration    `json:"boundsDuration,omitempty"`
	FrequencyMax   *string      `json:"frequencyMax,omitempty"`
	Frequency      *string      `json:"frequency,omitempty"`
	PeriodMax      *string      `json:"periodMax,omitempty"`
	BoundsPeriod   *Period      `json:"boundsPeriod,omitempty"`
	DayOfWeek      *string      `json:"dayOfWeek,omitempty"`
	TimeOfDay      *string      `json:"timeOfDay,omitempty"`
	Offset         *string      `json:"offset,omitempty"`
}

type TriggerDefinition struct {
	Condition         *Expression        `json:"condition,omitempty"`
	Name              *string            `json:"name,omitempty"`
	Data              []*DataRequirement `json:"data,omitempty"`
	Extension         []*Extension       `json:"extension,omitempty"`
	ID                *string            `json:"id,omitempty"`
	TimingTiming      *Timing            `json:"timingTiming,omitempty"`
	Code              *CodeableConcept   `json:"code,omitempty"`
	TimingDateTime    *string            `json:"timingDateTime,omitempty"`
	Type              *string            `json:"type,omitempty"`
	ResourceType      *string            `json:"resourceType,omitempty"`
	TimingDate        *string            `json:"timingDate,omitempty"`
	SubscriptionTopic *string            `json:"subscriptionTopic,omitempty"`
}

type UsageContext struct {
	Extension            []*Extension                      `json:"extension,omitempty"`
	ID                   *string                           `json:"id,omitempty"`
	ResourceType         *string                           `json:"resourceType,omitempty"`
	ValueCodeableConcept *CodeableConcept                  `json:"valueCodeableConcept,omitempty"`
	ValueQuantity        *Quantity                         `json:"valueQuantity,omitempty"`
	ValueRange           *Range                            `json:"valueRange,omitempty"`
	ValueReference       []UsageContextValueReferenceUnion `json:"valueReference,omitempty"`
	Code                 *Coding                           `json:"code,omitempty"`
}

type VirtualServiceDetail struct {
	ResourceType                 *string                `json:"resourceType,omitempty"`
	AdditionalInfo               *string                `json:"additionalInfo,omitempty"`
	AddressContactPoint          *ContactPoint          `json:"addressContactPoint,omitempty"`
	AddressExtendedContactDetail *ExtendedContactDetail `json:"addressExtendedContactDetail,omitempty"`
	SessionKey                   *string                `json:"sessionKey,omitempty"`
	Extension                    []*Extension           `json:"extension,omitempty"`
	ID                           *string                `json:"id,omitempty"`
	AddressString                *string                `json:"addressString,omitempty"`
	AddressURL                   *string                `json:"addressUrl,omitempty"`
	ChannelType                  *Coding                `json:"channelType,omitempty"`
	MaxParticipants              *string                `json:"maxParticipants,omitempty"`
}

type Accessibility string

const (
	AccessibilityAll          Accessibility = "all"
	AccessibilityAccessible   Accessibility = "accessible"
	AccessibilityUnaccessible Accessibility = "unaccessible"
)

var AllAccessibility = []Accessibility{
	AccessibilityAll,
	AccessibilityAccessible,
	AccessibilityUnaccessible,
}

func (e Accessibility) IsValid() bool {
	switch e {
	case AccessibilityAll, AccessibilityAccessible, AccessibilityUnaccessible:
		return true
	}
	return false
}

func (e Accessibility) String() string {
	return string(e)
}

func (e *Accessibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Accessibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Accessibility", str)
	}
	return nil
}

func (e Accessibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Format string

const (
	FormatJSON Format = "json"
	FormatTsv  Format = "tsv"
	FormatCSV  Format = "csv"
)

var AllFormat = []Format{
	FormatJSON,
	FormatTsv,
	FormatCSV,
}

func (e Format) IsValid() bool {
	switch e {
	case FormatJSON, FormatTsv, FormatCSV:
		return true
	}
	return false
}

func (e Format) String() string {
	return string(e)
}

func (e *Format) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Format(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Format", str)
	}
	return nil
}

func (e Format) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
